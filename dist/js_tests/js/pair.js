// Generated by CoffeeScript 2.0.1
(function () {
  var dec64, enc64;

  dec64 = Universa.utils.decode64;

  enc64 = Universa.utils.encode64;

  Unitest.addTestModule(function () {
    var APP_TOKEN, PACKED_13KB_DATA, PACKED_3KB_DATA, PACKED_CHANGING_ACC_KEY, PACKED_PRIVATE_KEY_1, PACKED_PRIVATE_KEY_2, TEST_APP_TOKEN, connection1, connection2, privateKey1, privateKey2, publicKey1, publicKey2;
    TEST_APP_TOKEN = "X19URVNUSU5HX1RPS0VOX2xramhsZGtqcWUhQCRsa2poYjMyMDk4NDFkdWIkOTE3LWghbGtqa2wsaTk=";
    APP_TOKEN = "ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==";
    PACKED_PRIVATE_KEY_1 = dec64('JgAcAQABvIEA/lcxRgJEfLoN0TqJkN6m/q+qiV3wGn3k53EEyIhVwqpWU9XntSCfPfIcTpfGrd2RvUZFEn1eW1Uc4XkDw5DZ++k2+lvbL5udllpbDtG9bSjG8Y0SruiwOUXijQzW/esWhi4b6OCCAcXCgIDDh5607JWAyS+XEK38V3MqfqfHbd+8gQDPVmtdpdownVM95HWwW/SLzy+XdHJA46pd8ROcnMnHJNjYREjFYeWzWSZJ4BviOXkdni82l8sH+szEcMeXT9m5Dl86L7vAkoUPT06OcUKc4aKB5ZtczMy2O4fCU+w1nmW+sEB/LgXleri2KBkDBwXEivvWXj2WCd8r4CRa+fhamQ==');
    PACKED_PRIVATE_KEY_2 = dec64('JgAcAQABvIEA96FWTEq/Wjmd7kYbx04I/Ax3OQV+6e4YWu7xBr8k/SexvYvFEE3c9dRsZSsEj7KzYrNpIXezCsxO+j1sHADmeojwuveDdQQM6M6fbvygHq/mxKGllDoJTpzX/CnkuXDwC+lpRkkMTIF48GaYDM525951HYW1pAIYaVr+V5ctVQW8gQDGM71OC1yBLv6n23dEuu9Vqna2lvDpEWNO7MgKY0Ri9vUPwp+F+dUiKsRTbjnukDFqiYiNj+jkcWgiXqnjqdAGf9LUWHfF80W1PwUhkFw7torLJfaAr6bZ6FRzGcxTMad0x7Rz+5lkBjliKqOt8AUAIvMVe45G0c0StJSoqdqc4Q==');
    PACKED_13KB_DATA = dec64('');
    PACKED_3KB_DATA = dec64('UEsDBAoAAAAAAG2+cEsAAAAAAAAAAAAAAAAMAAAAYXR0YWNobWVudHMvUEsDBAoAAAAAAG2+cEuHoKvH8AkAAPAJAAAYAAAAYXR0YWNobWVudHMvMiB1dXUudW5pY29uJzt2ZXJzaW9uGCN0eXBlU3VuaWNhcHN1bGVTc2lnbmF0dXJlcw7EkgEXI2V4dHO8gh8ba2V5vCEHRP2ep7BfoI+CSINcn8WXiRv5hSTfOSpOeAzbNjEmgKMzc2hhNTEyvEDN1G+9URH32sApY9F2jp7BQ4UX5BXqXyLh5NSk/wgsOOUBLoKxMpmOWT0sDWlUfj7MHtuvDozqdSBeukeM+Bz7U2NyZWF0ZWRfYXR5Gx4TUIUjc2lnbsQAAZGQUyT+jD1+gOnvUWcWTEAII+HNMJcW/uIYEGZjykfOKlnaqfjIlA0CK2AVzw/MMHKaB5BAVPXf6kF0zPunc1znxYbKoWCRYtCI6dRNVG1orxj0O4IPK/YXUfcF+Ut7AjirclJmucQoTwV63u4wtrC3TDmBEroSbcMmVZ+yXz37sk+TG9y9ESt9bynFbKgKLZPZ23BK2vc9+Tuntx3BuRU8a+b62TdhWxkgb65E9Urf0RWDOVBfAfU9wWvzi2TuPe5DOFYrB7SlZehLn6WXf4Ivcws2KJ6/30KvfJT7ID6poDDRT7Wcl5kCXI3IwdFA9208eC26Qn7i5Ss+sDNjsqcjZGF0YcQtCB9DcmV2b2tpbmcmFzNfX3R5cGUzSGFzaElkM3NoYTUxMrxAFWTr9t86yi8rjOpJURqkCcit4fu4dqjaLCcMxD4Rg/KD4JU0hvtJfo+U09lC7uVLYYE+PyCQPjLgq06IO9CP1xctNT28QBVk6/bfOsovK4zqSVEapAnIreH7uHao2iwnDMQ+EYPyg+CVNIb7SX6PlNPZQu7lS2GBPj8gkD4y4KtOiDvQj9cXLTU9vEDv6VGCJn/hPKFujU/Qmy3G/d0RjGNEnV+4u0zGVQk4F0xoG5traGrMdj67izHtV67YaNEwixIdIRdvrlSOTsJNFy01PbxAFWTr9t86yi8rjOpJURqkCcit4fu4dqjaLCcMxD4Rg/KD4JU0hvtJfo+U09lC7uVLYYE+PyCQPjLgq06IO9CP10Njb250cmFjdCctg1VuaXZlcnNhQ29udHJhY3RLYXBpX2xldmVsEFNkZWZpbml0aW9uL1NjcmVhdGVkX2F0eS9dElCFI2RhdGEfS3VuaXRfbmFtZRt1dXV7dW5pdF9zaG9ydF9uYW1lvRlrdGVtcGxhdGVfbmFtZWtVTklUX0NPTlRSQUNUM2lzc3Vlch8tU1NpbXBsZVJvbGUjbmFtZb0dI2tleXMOFy1LS2V5UmVjb3JkG2tleRctY1JTQVB1YmxpY0tleTNwYWNrZWTECgEeCBwBAAHEAQEAuCyBWYTIUXUP4yyaaoYAE4r1II95PEHXygZ2fSZ5LxnI1PHBRhrMsuI2VmkzeeakIju1enszCj6YbeQlGQ6Op4UlULI1t4bXHzStjs9718u+jhgqaaaKY2WaCeQe4OqMflpmAfdT6L6DVaqmEurU4vX2ey7+wN6ZsURSyAGpphDgZwJBqdWB3cxK0vcAazXlxozgcU9YgeMR6Io40HR3aVmqITrVnwVPZmFPDHZoqY+tYHQC1aXolSK1CN37AypnEa5/lj7byw5o/MWf1mlxjR9P38//R4EMyuRUNsPsJTHBOHrnztXeWhif1LL7Nt3yrg2hJBxD/ahYDntU1z93k1twZXJtaXNzaW9ucyczQmlhU2VrHy2DUmV2b2tlUGVybWlzc2lvbiNyb2xlHy1DUm9sZUxpbmu9IDtAcmV2b2tlW3RhcmdldF9uYW1lK293bmVyvSAzcmV2b2tlM3JTVTJYZD9TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlOXsUrkfheoQ/Q21pbl91bml0OXsUrkfheoQ/i2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW4tm1NwbGl0Sm9pblBlcm1pc3Npb269Lx8tvTG9IFtAc3BsaXRfam9pbr0zvTS9IFNzcGxpdF9qb2luM3l0Q2oxdx8tq0NoYW5nZU93bmVyUGVybWlzc2lvbr0vHy29Mb0ga0BjaGFuZ2Vfb3duZXK9M700vSBjY2hhbmdlX293bmVyM3ZXanRzYSczZmllbGRzD1tkZXNjcmlwdGlvbgYto01vZGlmeURhdGFQZXJtaXNzaW9uvS8fLb0xvSBjQG1vZGlmeV9kYXRhvTO9NL0gW21vZGlmeV9kYXRhK3JvbGVzBitzdGF0ZVeteS9dElCFU2V4cGlyZXNfYXR5LwMwG4ZTY3JlYXRlZF9ieR8tvR+9IDtjcmVhdG9yvSEOFy29JL0lFy29J70oxAoBHggcAQABxAEBALgsgVmEyFF1D+MsmmqGABOK9SCPeTxB18oGdn0meS8ZyNTxwUYazLLiNlZpM3nmpCI7tXp7Mwo+mG3kJRkOjqeFJVCyNbeG1x80rY7Pe9fLvo4YKmmmimNlmgnkHuDqjH5aZgH3U+i+g1WqphLq1OL19nsu/sDembFEUsgBqaYQ4GcCQanVgd3MStL3AGs15caM4HFPWIHjEeiKONB0d2lZqiE61Z8FT2ZhTwx2aKmPrWB0AtWl6JUitQjd+wMqZxGuf5Y+28sOaPzFn9ZpcY0fT9/P/0eBDMrkVDbD7CUxwTh6587V3loYn9Sy+zbd8q4NoSQcQ/2oWA57VNc/d5O1D705CzK9NB8tvR+9IL00vSEOFy29JL0lFy29J70oxAoBHggcAQABxAEBALgsgVmEyFF1D+MsmmqGABOK9SCPeTxB18oGdn0meS8ZyNTxwUYazLLiNlZpM3nmpCI7tXp7Mwo+mG3kJRkOjqeFJVCyNbeG1x80rY7Pe9fLvo4YKmmmimNlmgnkHuDqjH5aZgH3U+i+g1WqphLq1OL19nsu/sDembFEUsgBqaYQ4GcCQanVgd3MStL3AGs15caM4HFPWIHjEeiKONB0d2lZqiE61Z8FT2ZhTwx2aKmPrWB0AtWl6JUitQjd+wMqZxGuf5Y+28sOaPzFn9ZpcY0fT9/P/0eBDMrkVDbD7CUxwTh6587V3loYn9Sy+zbd8q4NoSQcQ/2oWA57VNc/d5NDcmV2aXNpb24gvVMGS2JyYW5jaF9pZBszOjAzb3JpZ2luFy01PbxAtjEscSWT6su4acm8akKUscxjxwGXcpq+GbQu4c4V6lcw90FUaSsfvZHbGBczlCJuEbak6TiK8mEBUqipF0M5ITNwYXJlbnQXLTU9vEAVZOv23zrKLyuM6klRGqQJyK3h+7h2qNosJwzEPhGD8oPglTSG+0l+j5TT2ULu5UthgT4/IJA+MuCrTog70I/XG25ldw4XLTU9vECMRRegF4XkjMeAwyIbe3ygswNp3VPEg3I5gpjxqpJxA4OR4rxigjKpfbzu3v3ts48XldGQ+5YB1Rcd6PUpq19WUEsBAhQACgAAAAAAbb5wSwAAAAAAAAAAAAAAAAwAAAAAAAAAAAAQAAAAAAAAAGF0dGFjaG1lbnRzL1BLAQIUAAoAAAAAAG2+cEuHoKvH8AkAAPAJAAAYAAAAAAAAAAAAAAAAACoAAABhdHRhY2htZW50cy8yIHV1dS51bmljb25QSwUGAAAAAAIAAgCAAAAAUAoAAAAA');
    PACKED_CHANGING_ACC_KEY = dec64('JgAcAQABxAAB6X7cH9NdSxJ1rR/7QeRmDCWM0qNIJkQnI/T8kIAFt2VElm+7\nXeOEpN7tJC85dddWN6hegqW5FrJ8Ug2w8wBuseb/nZpEPeXzKjnAGpd7vrx3\nqfrvQirjCKyVE6OyseLGG1RXvcMTseqdCLAJz/a00SdgqRjK5zH6BhCJiRzV\n8tBsycopGrtPDbHbiSpgmYqvk63nLAxUrD6K/ZdfIN2P7HYekN9Um16L8e9U\nRo8oqxTAv5kVLr04pA0GajBXl6jUa5Kp/xawSJmOeWY7Hpoi3u2zUa/sMs7O\nRivG9Hbvmj/S89wCjyFd0etLsdT1DH5bnZqWY34pFNuSqOvUKF8AdcQAAfjR\n0ILGcT0oRWN+oa5veOJy0icrk+KpCtDOcDSBLB6glU2HuS75WDJhlWDKcjBC\nm+JdpDRvc+6ISiDs3uUwoMz49mOkGriGJgMwUAnn+o2k+4aL6f2xfOLpGOio\nkKwGXg86zQLFD20qqToxfrZFvzjmVtM9msuNxeJjJtt/2tx6iMogaql8B6Cq\nJLTYuKdb+aJPp8oGNit2ofsp7nbzSKSAXWAX3d25H8HAhJ+xDCJ3r0gmRCcj\n9PydN2XsqHGWb7G9Rs4H0HgXndP9/fHjyiPLa/15BuiluRay4VJnmhFR0Tjr\nEL+nURLBubWit2VY/I0GxfDMdlwz3qi00lLW7ss=');
    connection1 = null;
    connection1 = CryptoCloud.connect(APP_TOKEN, Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1));
    connection2 = CryptoCloud.connect(APP_TOKEN, PACKED_PRIVATE_KEY_2);
    privateKey1 = new Universa.PrivateKey(PACKED_PRIVATE_KEY_1);
    privateKey2 = new Universa.PrivateKey(PACKED_PRIVATE_KEY_2);
    publicKey1 = privateKey1.publicKey;
    publicKey2 = privateKey2.publicKey;
    Unitest.addTest('pack plain public key', function () {
      var privKey, pubKey, pubKey2;
      privKey = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1);
      pubKey = privKey.publicKey;
      pubKey2 = Universa.PublicKey.fromPlain(pubKey.packed);
      return this.assertEquals('' + pubKey.fingerprint, '' + pubKey2.fingerprint);
    });
    Unitest.addTest('remove base64 converted pair from cloud', async function () {
      var api, pair, pairBase64, pairs;
      api = await CryptoCloud.connectWithPassword(TEST_APP_TOKEN, 'pollos', 'adminadmin');
      pairs = await Universa.Pair.AllFromCloud(api);
      console.log(pairs.length);
      pairBase64 = Universa.utils.encode64(pairs[0].toBOSS());
      pair = Universa.Pair.fromBOSS(Universa.utils.decode64(pairBase64));
      return pair.deleteFromCloud(api);
    });
    Unitest.addTest('generate pair and remove from cloud', async function () {
      var api, isDestroyed, keyPair, ll, pairs, privateKey;
      api = await CryptoCloud.connectWithPassword('ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==', 'pollos', 'adminadmin');
      // Get keys from the cloud
      pairs = await Universa.Pair.AllFromCloud(api);
      ll = pairs.length;
      console.log('Initial import count', ll);
      // Create keyPair and save to the cloud
      privateKey = await Universa.PrivateKey.create(2048);
      keyPair = Universa.Pair.FromPrivateKey(privateKey);
      keyPair.setName('somepair');
      await keyPair.toCloud(api);
      // Get keys from the cloud
      pairs = await Universa.Pair.AllFromCloud(api);
      console.log('Count after pair added', pairs.length);
      // Convert keyPair to base64 and back
      keyPair = Universa.Pair.fromBOSS(Universa.utils.decode64(Universa.utils.encode64(pairs[0].toBOSS())));
      // Destroy key pair
      isDestroyed = await keyPair.deleteFromCloud(api);
      this.assertTrue(isDestroyed);
      // Get pair from the cloud
      pairs = await Universa.Pair.AllFromCloud(api);
      console.log('Count after pair removed', pairs.length);
      return this.assertEquals(pairs.length, ll);
    });
    Unitest.addTest('pair from publicKey', async function () {
      var api, cloudId, cloudId2, deserialized, pair, pair2, privKey, pubKey, serialized;
      privKey = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1);
      pubKey = privKey.publicKey;
      api = await CryptoCloud.connect(TEST_APP_TOKEN, PACKED_CHANGING_ACC_KEY);
      pair = Universa.Pair.FromPublicKey(pubKey);
      cloudId = await Universa.Pair.ToCloud(pair, api);
      cloudId2 = await Universa.Pair.ToCloud(pair, api);
      this.assertEquals(cloudId, cloudId2);
      pair2 = await Universa.Pair.FromCloud(cloudId, api);
      this.assertEquals(pair.name$2, pair2.name$2);
      await pair.deleteFromCloud(api);
      serialized = pair2.toBOSS();
      deserialized = Universa.Pair.fromBOSS(serialized);
      //console.log(deserialized)
      return this.assertEquals(deserialized.name, pair2.name);
    });
    Unitest.addTest('pair from privateKey', function () {
      var pair, privKey, pubKey;
      privKey = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1);
      pubKey = privKey.publicKey;
      pair = Universa.Pair.FromPrivateKey(privKey);
      return this.assertEquals('' + pair.publicKey.fingerprint, '' + pubKey.fingerprint);
    });
    Unitest.addTest('pairs from localStorage', function () {
      var pair, pairs, privKey, uuid;
      privKey = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1);
      pair = Universa.Pair.FromPrivateKey(privKey);
      uuid = pair.save();
      console.log(uuid);
      pairs = Universa.Pair.AllPrivatePairsFromStorage();
      return this.assert(pairs.length, 1);
    });
    return Unitest.addTest('pairs all from cloud', async function () {
      var api, pairs;
      api = await CryptoCloud.connect(TEST_APP_TOKEN, PACKED_CHANGING_ACC_KEY);
      pairs = await Universa.Pair.AllFromCloud(api);
      console.log(pairs);
      return this.assertEquals(pairs.length, 1);
    });
  });
}).call(this);