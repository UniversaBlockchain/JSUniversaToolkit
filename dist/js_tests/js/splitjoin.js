// Generated by CoffeeScript 2.0.1
(function () {
  var Contract, dec64, enc64, test;

  test = window.unitjs || {};

  dec64 = Universa.utils.v2.decode64;

  enc64 = Universa.utils.v2.encode64;

  Contract = Universa.Contract;

  Unitest.addTestModule(function () {
    var APP_TOKEN, A_PAIR, A_UPACK, B1_PRIVATE, B1_UPACK, B_PAIR, B_UPACK, CONTRACT_BIN, CONTRACT_BIN2, CONTRACT_KEY, PACKED_PRIVATE_KEY_1, PACKED_PRIVATE_KEY_2, TOKEN_CONTRACT, T_BIN3, T_KEY3, U_BIN3, U_CONTRACT_BIN, U_CONTRACT_BIN2, U_KEY, U_KEY3;
    PACKED_PRIVATE_KEY_1 = dec64('JgAcAQABvIEA/lcxRgJEfLoN0TqJkN6m/q+qiV3wGn3k53EEyIhVwqpWU9XntSCfPfIcTpfGrd2RvUZFEn1eW1Uc4XkDw5DZ++k2+lvbL5udllpbDtG9bSjG8Y0SruiwOUXijQzW/esWhi4b6OCCAcXCgIDDh5607JWAyS+XEK38V3MqfqfHbd+8gQDPVmtdpdownVM95HWwW/SLzy+XdHJA46pd8ROcnMnHJNjYREjFYeWzWSZJ4BviOXkdni82l8sH+szEcMeXT9m5Dl86L7vAkoUPT06OcUKc4aKB5ZtczMy2O4fCU+w1nmW+sEB/LgXleri2KBkDBwXEivvWXj2WCd8r4CRa+fhamQ==');
    PACKED_PRIVATE_KEY_2 = dec64('JgAcAQABvIEA96FWTEq/Wjmd7kYbx04I/Ax3OQV+6e4YWu7xBr8k/SexvYvFEE3c9dRsZSsEj7KzYrNpIXezCsxO+j1sHADmeojwuveDdQQM6M6fbvygHq/mxKGllDoJTpzX/CnkuXDwC+lpRkkMTIF48GaYDM525951HYW1pAIYaVr+V5ctVQW8gQDGM71OC1yBLv6n23dEuu9Vqna2lvDpEWNO7MgKY0Ri9vUPwp+F+dUiKsRTbjnukDFqiYiNj+jkcWgiXqnjqdAGf9LUWHfF80W1PwUhkFw7torLJfaAr6bZ6FRzGcxTMad0x7Rz+5lkBjliKqOt8AUAIvMVe45G0c0StJSoqdqc4Q==');
    CONTRACT_KEY = dec64("JgAcAQABvIEAxAgalqIUgnCbe3Cc34xSBkjIl7bbE6TZSDj+rmgM8yjP7UbpLbB85aY2ZxH0OItYwZQH/cawVJGAkTcxTH1A5A7l6P/4o97yP4Qkb7XYpDlwXhvWlHTpvODrI8eT5KIBW+JFHSmHk3NSCQg6XoA7X0+t0vZXr3aMvP4ACw2R8gW8gQC93hQfbkJaNMAJZ+wQMQIVr6Amy1Me4H6v83wDv4gH7TfgGJlJj5MY3HwHtXO5Ac0vcPxVlRgX0VUe5jM1kfB3Q+nV5md4O/oZZMs0NKxusShPckEE5tQnHqt3UNcMw8LL7UVWfCFbmB535hD8RbxODYdnz+R2JDHUEYL8ZlmLRQ==");
    TOKEN_CONTRACT = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHzvf2ewe01Gr/SXiQmfSlbto0+hvXDfzp5zKO7Wh6jjkzc2hhNTEyvEDnPcipF79vkgDke7wakM2FXJ9fH5z0+H/4z5xTi/jwIUjE/qNNBhGduZRxOd3M38dvT4ssvefCEfqtpXubh2GbU2NyZWF0ZWRfYXR5Z2VRW4U7cHViX2tlecQJAR4IHAEAAcQAAe3C2h9dSnSNxrbCjXZ5j5KRJeg1TIkzSvYyZS8CdgbYdougUZ30PnGNJxxP/n4fyKToQtBX9av3n2V+WFb29CsHK18pivlzLdYCdZJ05r1SHSQ7NmkBXJIges+XPiaP/EKFmWOizDItLhff1Zkzo0ZKkoZe04kgk6b5x6G+N4PW9G62RTYRdia33W2tnkzT6e8HvrvQV28irrX2jfr+buKMM3RTzmSi2bZVFsqBPMLMSAM5RgG4N0tGee0Hf001H2wbG2Koik6Xip3JKLGwkGGY0af3YYj3X0hvjomdnnLmgQjkZQaeLEmYVVKM+rSY2e0Lu5aVd0oaCAAH2v5X/4sjc2lnbsQAAbARzkoUJZbReUp01Re9BtkiLuXik2l1wo2dm1AFzaxdUxn/ySsSV+gazJ1ATm4Z0MNJ2PXu+clsIem+tt1ZXPb6m5w4NZ1A/FIiGrvbsbPDv0e3hMKzijbudl2VjX+hIhJ4Jd+pl75VmNKiYsKUDyArY3G1GyO4uKmd4kia7eMiVj7gbQomVg6tEnSlpbdn1i0XTUjeHT57u7Tg8rK40vtcvgNNSG5s4jat8woVHhRVsP+Km5pqHQeWCOsBoJRwRtmatF7/9wxFhSkeEEvg5fAqgP0NpnMaVMiSTNI53WjysBx2JvuxZ6wiuUmJi4KFaOEtPs+zIFmHmN5OHra5AiUjdHlwZVN1bmljYXBzdWxlI2RhdGHEjgIfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucx8zb21xbFpaPyNuYW1lU3NwbGl0X2pvaW4jcm9sZR9tW0BzcGxpdF9qb2luW3RhcmdldF9uYW1lK293bmVyM19fdHlwZUNSb2xlTGlua1NmaWVsZF9uYW1lM2Ftb3VudEttaW5fdmFsdWULMUNtaW5fdW5pdL0Zi2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW6lm1NwbGl0Sm9pblBlcm1pc3Npb24zZXRPSHk1H20zcmV2b2tlfR9tO0ByZXZva2WVnaWtpYNSZXZva2VQZXJtaXNzaW9uM1FYeWVyWR9tY2NoYW5nZV9vd25lcn0fbWtAY2hhbmdlX293bmVylZ2lraWrQ2hhbmdlT3duZXJQZXJtaXNzaW9uI2RhdGEfS3VuaXRfbmFtZRtFRUV7dW5pdF9zaG9ydF9uYW1lvS5rdGVtcGxhdGVfbmFtZWtVTklUX0NPTlRSQUNUU2NyZWF0ZWRfYXR5ZmVRW4UzaXNzdWVyJ229MyNrZXlzHUthZGRyZXNzZXMOF0N1YWRkcmVzc7wlEGoJSgrDj/9k84tVG1PfRy0mSqMF/24au4ILFvRMSoh7CIBMj6VTS2V5QWRkcmVzc6VTU2ltcGxlUm9sZStzdGF0ZTe9Kw+9FzMxMDAwMDBTY3JlYXRlZF9ieR9tO2NyZWF0b3KVvTOlrb0yeWZlUVuFnR9tnZW9M6WtQ3JldmlzaW9uCFNleHBpcmVzX2F0eWZ5Nl+Fa3RyYW5zYWN0aW9uYWwFpYNVbml2ZXJzYUNvbnRyYWN0G25ldx07dmVyc2lvbhg=");
    CONTRACT_BIN = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHIW0+GsAKUpe2uAutc1sVJe5nAtAh2qNy6sbElW63sxkzc2hhNTEyvEC7isYtxwakzwY9oNHrvU0XeC6Rw8P6eRfwKzVLKJlHdxYnJDx8MekWOQbESscLgutSAv1VQVatiWEWVk3bWB/tU2NyZWF0ZWRfYXR5fF94WoU7cHViX2tlecQJAR4IHAEAAcQAAZFkChD3xvmUTaPLsAccyeMbBwcZMugW3cQEEfimLOiSzavEiAGQpCnC8paTpUn1YJEAevCowV1LHMqtbtCxPP9aCIvvDR5GYvblKkBU5f6/slIE4k7IFh6UucvBKb9L5oOh2qPXfsXzYBNenLFsb764Ld88HR/TffanGGoqXNURENpGSe69+W6x8FnvAJNPInAiOeYGJN5g+7bxss15e6+HO53tZKbY1dWin7jxIN6/j/xTY8GgZO1F0AWkrOpMlZeNbqPHIpgThbJWEYyfrlr1pSRr//7mjAPtbJFsbve3+1NdDbCiGuG1J8TC8M7hF4WUlIuBMLi29KGocAh78lkjc2lnbsQAAWZ9UZirUx8WTA+SOjHB6H6n/Q4uziTaU+CobxOtRE+VeFLMQ0AGAt3BhqiWhlgU8w5EUXcrb4XBGPsM2pRQffJ22WmzsIosz5oBj6LUrb83c3lE3ogiXyb0g4ryn5apo5DTHz3HxnnnyNtpFBrej7NdF+0G/g8CV1zBMMtmrH7pbz8FkFTIj8KtBjC35aDRSnz4n/RSO0M0BY1uedDEmm5sQOTFbNxFT8UzOVbGnWMfdMeREyHdI2rH8M4mARSN7IaNWkrNtrNc9rF03tzabZxHj5POX1GEKLxH8auqyEcjGVInvfBo8Rlmxj/0S0ScPCUkXFG6QIqqcZBmt/RLphwjdHlwZVN1bmljYXBzdWxlI2RhdGHEXQIfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucxczWlhnaU96HyNuYW1lM3Jldm9rZSNyb2xlH207QHJldm9rZVt0YXJnZXRfbmFtZStvd25lcjNfX3R5cGVDUm9sZUxpbmulg1Jldm9rZVBlcm1pc3Npb24zTTZ0b1J5P21Tc3BsaXRfam9pbn0fbVtAc3BsaXRfam9pbpWdpa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlOZqZmZmZmbk/Q21pbl91bml0OZqZmZmZmbk/i2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW6lm1NwbGl0Sm9pblBlcm1pc3Npb24jZGF0YR9LdW5pdF9uYW1la015IHRlc3QgdG9rZW57dW5pdF9zaG9ydF9uYW1lG01US2t0ZW1wbGF0ZV9uYW1la1VOSVRfQ09OVFJBQ1RTY3JlYXRlZF9hdHl7X3hahTNpc3N1ZXInbb0tI2tleXMdS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvCUQGlvDu904h8cszszl6nOZsA2sDamZ/vQBnfi0UIYnPIkDybWOpVNLZXlBZGRyZXNzpVNTaW1wbGVSb2xlK3N0YXRlN70kB1NjcmVhdGVkX2J5H207Y3JlYXRvcpW9LaWtvSx5e194WoWdH22dlb0tpa1DcmV2aXNpb24IU2V4cGlyZXNfYXR5CxBeXoVrdHJhbnNhY3Rpb25hbAWlg1VuaXZlcnNhQ29udHJhY3QbbmV3HTt2ZXJzaW9uGA==");
    U_CONTRACT_BIN = dec64("JyNkYXRhxC0GHxtuZXcGQ3Jldm9raW5nDhczX190eXBlM0hhc2hJZFNjb21wb3NpdGUzvGD9tVYDOBLZXut+OXcpO20+EySr2wFDwjOncTtTUVdT/tTcsKqNybVcMf3YX5uMx7iqw0ZmV6ZfGBMv+zgQtB2qCY4hJlm0ICpHwR/CbXQ6iljYY1ZHRNS61SdUlgeLsQpDY29udHJhY3QvS2FwaV9sZXZlbBg9g1VuaXZlcnNhQ29udHJhY3RTZGVmaW5pdGlvbjcjZGF0YRdTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0jbmFtZbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU3JlZmVyZW5jZXMdW3Blcm1pc3Npb25zJzNKdG9qUHg3raNkZWNyZW1lbnRfcGVybWlzc2lvbkttaW5fdmFsdWUAI3JvbGUfW3RhcmdldF9uYW1lK293bmVyPUNSb2xlTGlua60zb3duZXIyQ21heF9zdGVwClNmaWVsZF9uYW1ls3Rlc3RfdHJhbnNhY3Rpb25fdW5pdHM9u0Bjb20uaWNvZGljaS51bml2ZXJzYS5jb250cmFjdC5wZXJtaXNzaW9ucy5DaGFuZ2VOdW1iZXJQZXJtaXNzaW9uM3BXNDUzcTetvRy9HQC9Hr0fvSQKvSWLdHJhbnNhY3Rpb25fdW5pdHM9vSczbGFVbGFrH70eL0thZGRyZXNzZXMdI2tleXMOFxtrZXkXPWNSU0FQdWJsaWNLZXkzcGFja2VkxAkBHggcAQABxAABxSSWfXW20wGsRn9khVZDtvcCtUqP/scN3oVPU3r0152Fu62pfx9Mjc1cmQnRYSkeZzWA50RYQTU3FlXC5iIN7w+Lm6TGPQxWe+uYGMgKLCbAmyMXPWupvzeB5SEMtylQ5ml12iwFQkamqOiFE2KWMYz/UGhW87/ELPckmpoanZUa8OGCACUfFGALAZV0G+rQ/8xiW3hkGHmOFP0kejZaCZGPO/XGVay+2q0V2cw6CHar+D9F9FomXYA4bAInlY3zOLHdG8ddUTzhHQWOKmzoF9eIW67U9rd9qIR04U9ls9wGLQchqlG/kxHHfR4Js86mwYNgUKW49fQRppig+SsrjT1LS2V5UmVjb3JkPVNTaW1wbGVSb2xlrTNpc3N1ZXI7YW5vbklkcx09q0NoYW5nZU93bmVyUGVybWlzc2lvbq1jY2hhbmdlX293bmVyM1RiakZPRy+tvRy9HQC9Hh+9IL05Pb0irTtpc3N1ZXIyvSW9Jj29J1NjcmVhdGVkX2F0eR03IleFvTm9LStyb2xlcx0rc3RhdGVfvSEvvS4dvS8OF70yFz29NL01xAkBHggcAQABxAABh78/u0UMqu7hxOzj0IawiH/8u95EEGErTKuQYLpude5qjEWouwK0r7dy/gtzAv6oS/W+7s3v5i9NdLsOEmbX7vnqd0+odV02bcQj2mrmdsGYH3b9pLeEPwvkTCxh/t7iqjX+CAwCeaYTpUCyXUfpRbCCd0S5JmtgFDhNqc5MW5wHw9X/xRca54vWjcbeUbsP18rCSQfrf13zJ8QxaTYZataiGca7p16smZA5LXwgbFB7uV5SitJ0Tq/Tuwv3mFzM+OTq3RuL7Nhc9x2PhLJO9SwAdDtti5NinmWDZl7QVWjdd8ZdlAlloxKTZLWMIK1Z4PwLyOhJc9ILYS6ogXuN/T29Nz29OK29Ib06HTNwYXJlbnQ1U2V4cGlyZXNfYXR5HR4nZoWNF70quDa9JsiZhgG9Fx1LYnJhbmNoX2lkBTNvcmlnaW4XPUVNvGD4iaZmW8v6PEuUxHKv/UEjnGknHWWqDrsLXzvBFZVoEN/O80fsHumBvGjQSJ4yvZJPQwLMdtSiXHBMT34RApxO6cCE0yNK5uaOUImY88KlRQHNOSK2mp41MM0GtPBbyBK9QXlybShXhVNjcmVhdGVkX2J5Hz29OK07Y3JlYXRvcr0uDhc9U0tleUFkZHJlc3NDdWFkZHJlc3O8JRCUuKrDe2VkjFZfPL8ANdiRO2jg+ylqKjtdj02jWU6eFKVKcM1DcmV2aXNpb25ovUIda3RyYW5zYWN0aW9uYWwFI3R5cGVTdW5pY2Fwc3VsZTt2ZXJzaW9uGFNzaWduYXR1cmVzDsSoAhcjZXh0c8SXAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEAOqMTyDK+Bd5BnV7m16DkvpEWmch3A//gp5k5x8vQCTwj5W8Pz6HU5AmKHUKu+rti0EpMjFP0y0MEzv9bGo4sGU2NyZWF0ZWRfYXR5cm0oV4U7cHViX2tlecQKAR4IHAEAAcQBAQCHvz+7RQyq7uHE7OPQhrCIf/y73kQQYStMq5Bgum517mqMRai7ArSvt3L+C3MC/qhL9b7uze/mL010uw4SZtfu+ep3T6h1XTZtxCPaauZ2wZgfdv2kt4Q/C+RMLGH+3uKqNf4IDAJ5phOlQLJdR+lFsIJ3RLkma2AUOE2pzkxbnAfD1f/FFxrni9aNxt5Ruw/XysJJB+t/XfMnxDFpNhlq1qIZxrunXqyZkDktfCBsUHu5XlKK0nROr9O7C/eYXMz45OrdG4vs2Fz3HY+Esk71LAB0O22Lk2KeZYNmXtBVaN13xl2UCWWjEpNktYwgrVng/AvI6Elz0gthLqiBe439I3NpZ27EAAFvgK7CPwYtGUyU9JlmpLGZgu93rMbdJyn0Jm1f/spTYHuF4E2xtxuBg1y2xnaUs31XP+g2xy4NNiKTa5g8dmw/7HQXbiFCNXJ87WjyNu7tHobZItzdOm8zyKb5z3oiyfAOaQPqJ28n6AxxfyVqxRMfpNlwJ9VRy1suKRJrDVdQlOOhfADt+1dz1wbrx1AnTz7UmhhTaOV7lS+ItxmQ9UJbxMOpduM9cu/pkAS91+Z538E/vAUHgNIkA1gOuKVg6kMgYIAN4+yN7N7RqvIKFwqyLBWB9dQTLWFGvtPD58/SvUUWKR3I1jCEcY/dnPyk/KJR1F5cWDWDNzXQiArNQlgS");
    U_CONTRACT_BIN2 = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEBcxlqSlB4NbdJ6Q4BNJbg7AOzO4vnfWO/DEsG5/E5fIvjKztMOM/yCla5n2qsPa9uqnKgUc9YABsg5PIn/+9QGU2NyZWF0ZWRfYXR5JBY9WIU7cHViX2tlecQJAR4IHAEAAcQAAYe/P7tFDKru4cTs49CGsIh//LveRBBhK0yrkGC6bnXuaoxFqLsCtK+3cv4LcwL+qEv1vu7N7+YvTXS7DhJm1+756ndPqHVdNm3EI9pq5nbBmB92/aS3hD8L5EwsYf7e4qo1/ggMAnmmE6VAsl1H6UWwgndEuSZrYBQ4TanOTFucB8PV/8UXGueL1o3G3lG7D9fKwkkH639d8yfEMWk2GWrWohnGu6derJmQOS18IGxQe7leUorSdE6v07sL95hczPjk6t0bi+zYXPcdj4SyTvUsAHQ7bYuTYp5lg2Ze0FVo3XfGXZQJZaMSk2S1jCCtWeD8C8joSXPSC2EuqIF7jf0jc2lnbsQAASy+FLzeCJ7at/IZqkbuVuydfJZWuPfu9yWQVISBnNMI0hbyWb9sVGBvmvKBGAlEntlTFvNslpz0iMAM9ozZbnXjcbyQSPVPXFZmLlKSOYLHYPCZKTNy2BFzaM8m5bzwzqb9EGDRPfjfTmiJ7Gp5RZU/cXoThGfQZjzVTIDV8P9akRgUks29pdXkjtHHBqQhow4clied1ndoUv+yoVWeyWBGHnnCmPWReSUY2jQiOxvn9KYFNiOhR1WpoDIZGTY/VAoxz7U5eSt2rOTtKxiuAhTPR5VKkrjqbhz+z0TDxmOoDIZabLkkMBl+zewNb/7dasSfPUiI1oB38ky1h1i5L1ojdHlwZVN1bmljYXBzdWxlI2RhdGHEJwYfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgFFwMWOUUVelGIcTBzAg/2mjKu+e/QrI3flnx0PmFHExXhBj+GF2/X02cDVgRPJdoILS7Qfidu2ES5tFwByL9oC2I+Bz4QPOy08uvwLqMFH0mUtlAXbPUt/pIIeKJyqnlM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbjdbcGVybWlzc2lvbnMnM1RiakZPRy8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7aXNzdWVyMlt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWzdGVzdF90cmFuc2FjdGlvbl91bml0c0ttaW5fdmFsdWUAPbtAY29tLmljb2RpY2kudW5pdmVyc2EuY29udHJhY3QucGVybWlzc2lvbnMuQ2hhbmdlTnVtYmVyUGVybWlzc2lvbjNsYVVsYWsflWNjaGFuZ2Vfb3duZXKlJ5W9GCNrZXlzDhcba2V5FzNwYWNrZWTECQEeCBwBAAHEAAHFJJZ9dbbTAaxGf2SFVkO29wK1So/+xw3ehU9TevTXnYW7ral/H0yNzVyZCdFhKR5nNYDnRFhBNTcWVcLmIg3vD4ubpMY9DFZ765gYyAosJsCbIxc9a6m/N4HlIQy3KVDmaXXaLAVCRqao6IUTYpYxjP9QaFbzv8Qs9ySamhqdlRrw4YIAJR8UYAsBlXQb6tD/zGJbeGQYeY4U/SR6NloJkY879cZVrL7arRXZzDoIdqv4P0X0WiZdgDhsAieVjfM4sd0bx11RPOEdBY4qbOgX14hbrtT2t32ohHThT2Wz3AYtByGqUb+TEcd9HgmzzqbBg2BQpbj19BGmmKD5KyuNPWNSU0FQdWJsaWNLZXk9S0tleVJlY29yZEthZGRyZXNzZXMGPVNTaW1wbGVSb2xlPatDaGFuZ2VPd25lclBlcm1pc3Npb24zSnRvalB4N5WdpR+VM293bmVyMr0XK293bmVyPb0ZvRq9G70cAENtYXhfc3RlcAo9vR0zcFc0NTNxN5Wdpb0xvRqLdHJhbnNhY3Rpb25fdW5pdHO9HAC9NAo9vR1TcmVmZXJlbmNlc70sU2NyZWF0ZWRfYXR5HTciV4UjZGF0YReVs3RyYW5zYWN0aW9uIHVuaXRzIHBhY2tTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0rcm9sZXO9LL0YvSErc3RhdGVfS2JyYW5jaF9pZAW9OL0sU2NyZWF0ZWRfYnknlTtjcmVhdG9yvSK9LL0rDhdDdWFkZHJlc3O8JRCUuKrDe2VkjFZfPL8ANdiRO2jg+ylqKjtdj02jWU6eFKVKcM09U0tleUFkZHJlc3M9vS29OXkkFj1Yhb06F703uDa9G8iYhgG9MyeVvTO9Ig4XvSUXvSfECQEeCBwBAAHEAAGHvz+7RQyq7uHE7OPQhrCIf/y73kQQYStMq5Bgum517mqMRai7ArSvt3L+C3MC/qhL9b7uze/mL010uw4SZtfu+ep3T6h1XTZtxCPaauZ2wZgfdv2kt4Q/C+RMLGH+3uKqNf4IDAJ5phOlQLJdR+lFsIJ3RLkma2AUOE2pzkxbnAfD1f/FFxrni9aNxt5Ruw/XysJJB+t/XfMnxDFpNhlq1qIZxrunXqyZkDktfCBsUHu5XlKK0nROr9O7C/eYXMz45OrdG4vs2Fz3HY+Esk71LAB0O22Lk2KeZYNmXtBVaN13xl2UCWWjEpNktYwgrVng/AvI6Elz0gthLqiBe439Pb0pPb0qvSu9LD29Lb0/vSxDcmV2aXNpb25wM29yaWdpbhctvGD4iaZmW8v6PEuUxHKv/UEjnGknHWWqDrsLXzvBFZVoEN/O80fsHumBvGjQSJ4yvZJPQwLMdtSiXHBMT34RApxO6cCE0yNK5uaOUImY88KlRQHNOSK2mp41MM0GtPBbyBI9RVNleHBpcmVzX2F0eR0eJ2aFM3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=");
    CONTRACT_BIN2 = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEDcahLFdkVg9A8MoGeqaL4hF+ffW6zfRgYVlydKanXjOLvt98hBa0osmUBhkTortfamr+E6x8ys4orvUARbQUwdU2NyZWF0ZWRfYXR5JBY9WIU7cHViX2tlecQJAR4IHAEAAcQAAYe/P7tFDKru4cTs49CGsIh//LveRBBhK0yrkGC6bnXuaoxFqLsCtK+3cv4LcwL+qEv1vu7N7+YvTXS7DhJm1+756ndPqHVdNm3EI9pq5nbBmB92/aS3hD8L5EwsYf7e4qo1/ggMAnmmE6VAsl1H6UWwgndEuSZrYBQ4TanOTFucB8PV/8UXGueL1o3G3lG7D9fKwkkH639d8yfEMWk2GWrWohnGu6derJmQOS18IGxQe7leUorSdE6v07sL95hczPjk6t0bi+zYXPcdj4SyTvUsAHQ7bYuTYp5lg2Ze0FVo3XfGXZQJZaMSk2S1jCCtWeD8C8joSXPSC2EuqIF7jf0jc2lnbsQAAWaqzL8OtPVvsuMJ3zfvFfcwyJxYxY1E82XkvRAi8HVr+LBqO18WgsuiJp1XRTVYnWMFT1Wen3XMyuZibsjAqKraZ+H6gHZiq0phlJ+CvX8EWL2GDhfyf6iIzVXe2xgYqOccCR8z1wRzsBU3FSAvw2f9HQY75i8Y4/s8A+JCaTqaYTCoxJcyPyTw4mBWRPmanyLal4/E5KHpep/nqpTZ3BMMQsjpRfVoHjwUV8yV4frjARC3drIpcq+pxirzNs5N+KqoYpX/tGtv5mA6AmjbZ0luS6m/18+Hb6qRM/mPOC0TR4Ji62xU6Mi288vZoKBOu/FJyikBDCJiOqhV65+t9DAjdHlwZVN1bmljYXBzdWxlI2RhdGHEgwEfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucw8zaVRuZjBiHyNuYW1lM3Jldm9rZSNyb2xlH207QHJldm9rZVt0YXJnZXRfbmFtZStvd25lcjNfX3R5cGVDUm9sZUxpbmulg1Jldm9rZVBlcm1pc3Npb25TY3JlYXRlZF9hdHkiFj1YhSNkYXRhBzNpc3N1ZXInbb0aI2tleXMdS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvCUQlLiqw3tlZIxWXzy/ADXYkTto4Pspaio7XY9No1lOnhSlSnDNpVNLZXlBZGRyZXNzpVNTaW1wbGVSb2xlK3N0YXRlN70XeSIWPViFU2NyZWF0ZWRfYnkfbTtjcmVhdG9ylb0apa29GL0ZnR9tnZW9GqWtQ3JldmlzaW9uCFNleHBpcmVzX2F0eSIqIlyFa3RyYW5zYWN0aW9uYWwFpYNVbml2ZXJzYUNvbnRyYWN0G25ldx07dmVyc2lvbhg=");
    U_KEY = dec64("JgAcAQABvIEAvLMxfM+DoEsA8dAJhe+k5RsESPAH+HM++ike3BOJQD+RwXBzRJ3i7FpkJy0m1Q+SNPBBpC9G08O41mJAaVHzNntIBiId0y6dJkQVb5FgdGFX0fi3ZmQo/e3DNErbmBqA30vPL6bhg9cN/Jel4QSKr7hFBENdFEgomiiSa19yp+28gQC4KVCrzd7cUlksW3eq8X2hjQ/+BsRRfEm/00S9Wjj73tXKKLQxbzgniSiusMgEqwPiH/ijPltncChOXd9bqdN7F2YwkCUY94OXMfRUvVKP6rp+L3IwcQdx5iLnEj/7MCGdspkND8hBmIgkIF3FoJg+l2mY/t+9Tfib5R+Tc2CcUQ==");
    APP_TOKEN = "ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==";
    U_KEY3 = dec64("JgAcAQABxAEBAOsjhh8HIil0hBrXLwsro+OaOkV4F38vjMGGPiTqgSVDpg0VW1smBEcH8YkmZ8V0gwCkqAjfk0HzBAJLJ5mGpVNgrtu1cqAYnslZYEaEbTrSAKTlBJRb4vZbB8dxkO1cbq07G3eSd9bw6bw+rpf589PJNO0UxlyFKuSV+ybRqTGGGm1RK4weqlVFBCyVpl9mFeJ2BrlR/3KC8zF6FMrjQGcqGaSNiljkVI3yw9Olz7RCzaj1fXyf8XmAwhSpRiRMv8n3CTRpnfBLGUuKeI4yt5bg7y+9lINpM3u9yf+/1GP7g7gj0FUlEu0pYBpPljaT7FXlMHynA4jUuvFlli/y7c/EAQEAx0QToND4exRXju5Rcg1HIgJji0e+uT94h3JhDnkwQun3zp0W4LM0jMNykjblBKcr7pEmacIdJNzgC/zOZudbnIVMxlulbeGGScNF9srCPbCZp7X60BNaeDqDR/IYSPm6Qympl/5aGHq7kJDbt82doj/WTi8RCbxUY4CbAe9e16B/Me0MSLniZJmprj9Vz7NgnxGNNsPH1TtFJQbHd20dtyfSCcoVV054WyoQC7KFgpEEH7r733fb/eJyzJDv+zkPmF/JkdX1JgrjVSAGrPOqvcc+K4zmjJ3v9gJMEAPIGwK8xK/f8FtAsGaEphSUzlyQFvh06FrbWc8LWuL944Inew==");
    T_KEY3 = dec64("JgAcAQABvID614fZClDDFZjRNLsu5xS56MTfJuyFe0hCdmBAbocLi97fJLgRCWjsH/WESGXvyLNOnhVd63EgUNynTGie27xJRbRp69CYvVCw3jvtKrAl9hXhoxRtkYi5vZvMBfxYHkuyAlAhql33FEgrOQLytdEB1GwWEu2wKkQaNYnmro41Z7yA8qZ2VHXWn8KMz/ls1qvhQmGG61bpi68zH9u90ROGtg2kUyyv1xN90PQzEePRPSexAA5mhac3YZ8xgkQBA4olIz/go9BGYIf9HQHgWHa3qu7S188Qb9fyULv6mNyICA4R+0Jnm2dTMeF4wWW6gYOQddQfuIk1Qp8kC1qgrnfeyj0=");
    U_BIN3 = dec64("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");
    T_BIN3 = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHIW0+GsAKUpe2uAutc1sVJe5nAtAh2qNy6sbElW63sxkzc2hhNTEyvEB6NChTb1LGerzRrVnRwKEA5kAjaXiZkRhJr/qlGWSgkK2TsikVSxHtxGcamRXWbRYvEElzps2xBprUnDuCeL4fU2NyZWF0ZWRfYXR5VAhRW4U7cHViX2tlecQJAR4IHAEAAcQAAZFkChD3xvmUTaPLsAccyeMbBwcZMugW3cQEEfimLOiSzavEiAGQpCnC8paTpUn1YJEAevCowV1LHMqtbtCxPP9aCIvvDR5GYvblKkBU5f6/slIE4k7IFh6UucvBKb9L5oOh2qPXfsXzYBNenLFsb764Ld88HR/TffanGGoqXNURENpGSe69+W6x8FnvAJNPInAiOeYGJN5g+7bxss15e6+HO53tZKbY1dWin7jxIN6/j/xTY8GgZO1F0AWkrOpMlZeNbqPHIpgThbJWEYyfrlr1pSRr//7mjAPtbJFsbve3+1NdDbCiGuG1J8TC8M7hF4WUlIuBMLi29KGocAh78lkjc2lnbsQAAUNBuh3CM56XZddjx/0+J5pK3KG6cDX10/00AIh5lG0KfQbd+KmVVX603rp1G3w1HwyxCm14ut01gbKczR9Oxj5XDRLaYJMikdSBNBWwyv64809ZFcCe58xFDTScXiIZE01T5lBiUgQgHcbXQQCphfnZb8FriIVQzaTUvk5GN2Q7q7w2S+GV7kLdCwvfzbEggjtabYlR7uHE8odmeTlWAXftqXU5BSDm7gt2ZKvo3jWcuI1WmlEV9EpEWiGM+RLJRbz7tH7WnL+yqv6TlF2o5uR3Hvo5pPc7xJFGrj2vpI1M6jLhkc5P+HalURGJClPs8fmRi+2TYVFLN1QFH3Ps14kjdHlwZVN1bmljYXBzdWxlI2RhdGHEmQIfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucx8zNXhoSWF0PyNuYW1lU3NwbGl0X2pvaW4jcm9sZR9tW0BzcGxpdF9qb2luW3RhcmdldF9uYW1lK293bmVyM19fdHlwZUNSb2xlTGlua1NmaWVsZF9uYW1lM2Ftb3VudEttaW5fdmFsdWUbMC4xQ21pbl91bml0vRmLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbqWbU3BsaXRKb2luUGVybWlzc2lvbjM1eG91cXIfbWNjaGFuZ2Vfb3duZXJ9H21rQGNoYW5nZV9vd25lcpWdpa2lq0NoYW5nZU93bmVyUGVybWlzc2lvbjMxSVVMd2UfbTNyZXZva2V9H207QHJldm9rZZWdpa2lg1Jldm9rZVBlcm1pc3Npb24jZGF0YR9LdW5pdF9uYW1la015IHRlc3QgdG9rZW57dW5pdF9zaG9ydF9uYW1lG01US2t0ZW1wbGF0ZV9uYW1la1VOSVRfQ09OVFJBQ1RTY3JlYXRlZF9hdHlTCFFbhTNpc3N1ZXInbb00I2tleXMdS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvCUQGlvDu904h8cszszl6nOZsA2sDamZ/vQBnfi0UIYnPIkDybWOpVNLZXlBZGRyZXNzpVNTaW1wbGVSb2xlK3N0YXRlN70rD70XGzEwMFNjcmVhdGVkX2J5H207Y3JlYXRvcpW9NKWtvTN5UwhRW4WdH22dlb00pa1DcmV2aXNpb24IU2V4cGlyZXNfYXR5Yzg2X4VrdHJhbnNhY3Rpb25hbAWlg1VuaXZlcnNhQ29udHJhY3QbbmV3HTt2ZXJzaW9uGA==");
    A_PAIR = dec64("PyNuYW1lK3RleGFzO2tleVR5cGVTUHJpdmF0ZUtleRtrZXnECgEmABwBAAG8gPrXh9kKUMMVmNE0uy7nFLnoxN8m7IV7SEJ2YEBuhwuL3t8kuBEJaOwf9YRIZe/Is06eFV3rcSBQ3KdMaJ7bvElFtGnr0Ji9ULDeO+0qsCX2FeGjFG2RiLm9m8wF/FgeS7ICUCGqXfcUSCs5AvK10QHUbBYS7bAqRBo1ieaujjVnvIDypnZUddafwozP+WzWq+FCYYbrVumLrzMf273RE4a2DaRTLK/XE33Q9DMR49E9J7EADmaFpzdhnzGCRAEDiiUjP+Cj0EZgh/0dAeBYdreq7tLXzxBv1/JQu/qY3IgIDhH7QmebZ1Mx4XjBZbqBg5B11B+4iTVCnyQLWqCud97KPSNzaXplwAAIS2NyZWF0ZWRBdHknCV9chTtjbG91ZElkMzIxNjgzNjNfX3R5cGUjUGFpcg==");
    A_UPACK = dec64("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");
    B_PAIR = dec64("PyNuYW1lO3JvbWFuZWM7a2V5VHlwZVNQcml2YXRlS2V5G2tlecQKASYAHAEAAbyA8yEbV9ViROiTr0bvxNYjriWLG9IjkC5QTf8hTicsbAVdWWFA+ozrjzVclceuCfCYk53sNoFmzD2bBYwiGp4dv5EamzOK1NXm/8Mbyw3hue4bv60AvETgmPFjeWMfwQhggdKNyPledOhuwPLidjZklsW/HaEzgZdu9JV9/Bz9UCW8gNGiycuA7a5355RifFEBGS4R6umgbjThwBZqoVfSc8DjeLgLJoCW0JXHDwOe3S8s0b9kLC9JM8UEpYBh54e3prCSl7jf0yC02dT6A6zbzIuyJptg8VUne0ze70IlBTsGLhn0XPhIOdhriPGRqJRLbLqe4A0hmjEX8bb00RNfI7azI3NpemXAAAhLY3JlYXRlZEF0eU8MX1yFO2Nsb3VkSWQzMjE2OTM0M19fdHlwZSNQYWly");
    B_UPACK = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHYzrflPR6iyEXYDWaNmbpPSihVw++LkpAL5ffffmJwQozc2hhNTEyvEDitowkxx0x5s+M/3espeI7ex3wXhgrsL8w+S9194rUBc6+D2xjiESWNU1Bkl89HG7SwbIzTaMTnvBuda7Epu7FU2NyZWF0ZWRfYXR5TTpoXIU7cHViX2tlecQJAR4IHAEAAcQAAePQ3y/noj/qMYgKDuNaD1c6Rl1yjxJWvyuTEZSLOnxg5mfF+bXWikGF+5Bsdb6cBlIBn11hALntej+DVA8bbQMn3jxM6IBecgUMS+cw4c6AmOYcXSytjjYLt9kEJag705wQLVoS81SdkuJDqcNRNg536vBRz5R6RKggfpoe8Xgw7VA/aThN6lNA0B0v8nWDx2eEuSnR7ySCxzjWCwpNVhNxpgwMMv/We5k0f2SqiSMY6A5oV0yJE++9BWrkphKLxHSkIvQAymJN2qfWDFXyRC4ZTX+ppWhZ0t5N23ogP3Wa2GAUstA+/LaF10i7z+D66M2RmkO8t9TRhtg4H7lzhFMjc2lnbsQAAdyGjMQpguOVuaQMmCpncovLetwbkEqVFPZwXXg5kO/6uMK9bA6VgAWo8OAIqFQxZQ/nN38zEtMgce+h8b/cZzJr4MPrb5M/3fYwd63Fznuk0su3PUxA4y9yRq6VuoktavOh9ENbt68MWd0PgfAu1wHWYg1mTPOcU/YXp85HgWICw8vQxIXOqtEGa5ukpHNTN5Sqafhg9ZuqP4cGfTCTP8t63ouFJH1tHsLHBnGTCzgBa1DUC7VDMxwMfk7mMQn7zaMvGq63P7CpEIabuMOT27gqhH+IS5ESEf0hWkVDOD/k2ATjRDAy9O23TJ3JkVP3tZFQBsP5O8Ms8Zu9fYBVXdIjdHlwZVN1bmljYXBzdWxlI2RhdGHE6QMfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgV+unX3TBJ6sRdi2tRtBRXjsI5sZtL/fieuRoLpoSfX1s1hpApwwu4jkl2epmPQOrQdiRHVDmG1d8qtQSncHuySXJQ7QhrfVsmGe7VhTMbpYroDrrbOTHsuUJ2s4pyIJ+M19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMvM2pOV3ZFVS8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7QGlzc3Vlclt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWLdHJhbnNhY3Rpb25fdW5pdHNLbWluX3ZhbHVlAD2zQ2hhbmdlTnVtYmVyUGVybWlzc2lvbjNwVV91QWsflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvbjNDbjg2YUw3lZ2lH5UzQG93bmVyvRcrb3duZXI9vRm9GrN0ZXN0X3RyYW5zYWN0aW9uX3VuaXRzvRwAQ21heF9zdGVwCj29HTNhaFgyMWUvlZ2lrb0avSe9HAA9vR0zaTlVRzJiN5Wdpb0kvRq9G70cAL0oCj29HVNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eSRUZFyFI2RhdGEXlbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU2lzc3Vlck5hbWW7F1VuaXZlcnNhIFJlc2VydmUgU3lzdGVtvRgnlb0YI2tleXO9LkthZGRyZXNzZXMOF0N1YWRkcmVzc7w1EBfN0oOhamb6PYvDVM9uSj6Nr1kH8bgyXDDtvvM+83AC5kI8+wU+onBC2itM6ZdN021HE2Q9U0tleUFkZHJlc3M9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZAW9Lb0uU2NyZWF0ZWRfYnkflTtjcmVhdG9yvRe9Jj29Gb0veU06aFyFvTAXvRu4K70nwFDDvSYnlb0mvTa9Lr03Dhe9OrwlEPTSqn5fTacqah6oyKuiPrsWFcgG4I84NeD2N2nAZwEpJGmx/j29PD29PUNyZXZpc2lvbkAzb3JpZ2luFy28YB8SqEIWBUVSqvyhzCo4ki/sehrzHsOMM0YyJsy+iZsy01lX+khTPjTxD2O8b9Dzo1Yyp3JI0BRdH43umqu5LK5CypkA55P80w6YEL0F1AzDFe9WuTiTjcBJBTdVNJrspj1FU2V4cGlyZXNfYXR5JDtpa4UzcGFyZW50JWt0cmFuc2FjdGlvbmFsBT2DVW5pdmVyc2FDb250cmFjdBtuZXe9Ljt2ZXJzaW9uGA==");
    //B1_UPACK = dec64 "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHYzrflPR6iyEXYDWaNmbpPSihVw++LkpAL5ffffmJwQozc2hhNTEyvEA72X1xMwjv+NXd+invuorTv4C90oUPQ8ueUbEKU4clGUMKZOzbboUn0q38thMEw8JGy8UUMMIvZ78mamJx087kU2NyZWF0ZWRfYXR5DyNpXIU7cHViX2tlecQJAR4IHAEAAcQAAePQ3y/noj/qMYgKDuNaD1c6Rl1yjxJWvyuTEZSLOnxg5mfF+bXWikGF+5Bsdb6cBlIBn11hALntej+DVA8bbQMn3jxM6IBecgUMS+cw4c6AmOYcXSytjjYLt9kEJag705wQLVoS81SdkuJDqcNRNg536vBRz5R6RKggfpoe8Xgw7VA/aThN6lNA0B0v8nWDx2eEuSnR7ySCxzjWCwpNVhNxpgwMMv/We5k0f2SqiSMY6A5oV0yJE++9BWrkphKLxHSkIvQAymJN2qfWDFXyRC4ZTX+ppWhZ0t5N23ogP3Wa2GAUstA+/LaF10i7z+D66M2RmkO8t9TRhtg4H7lzhFMjc2lnbsQAAS4omg8H5rV5n2YUCQtsTbsE2GQBzMUH+lIBoVGMHsDCYM4l2jFv2K/0/YVRxV0fF758NttAKUroRiMxe0KCY6W4TjPZlwLgRRSFi1OUKdxUq9lbJZGGIVZy8i4qgfGxkbxOF3B0f4v7x8k+IsQ+ZBSjvdYtRMzLC789rM/z48K7F1YfrWLqSHISe/RCHEW6R5rjmGh5qTS1ZoncI1MUtKmUZaFW8GlhFqJCTCrkdUWHlwG7xoGRbKRpiqu4BxRWq/IKOp02pspWPWDz3gGoEvYy39ZPVXxeYn9p7DlOkh2Hd4H4HuXs3kVbl+IfUXXAhpZvFqsfWXi7wiPVoOJBhZ8jdHlwZVN1bmljYXBzdWxlI2RhdGHE6QMfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgV+unX3TBJ6sRdi2tRtBRXjsI5sZtL/fieuRoLpoSfX1s1hpApwwu4jkl2epmPQOrQdiRHVDmG1d8qtQSncHuySXJQ7QhrfVsmGe7VhTMbpYroDrrbOTHsuUJ2s4pyIJ+M19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMvM2pOV3ZFVS8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7QGlzc3Vlclt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWLdHJhbnNhY3Rpb25fdW5pdHNLbWluX3ZhbHVlAD2zQ2hhbmdlTnVtYmVyUGVybWlzc2lvbjNwVV91QWsflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvbjNDbjg2YUw3lZ2lH5UzQG93bmVyvRcrb3duZXI9vRm9GrN0ZXN0X3RyYW5zYWN0aW9uX3VuaXRzvRwAQ21heF9zdGVwCj29HTNhaFgyMWUvlZ2lrb0avSe9HAA9vR0zaTlVRzJiN5Wdpb0kvRq9G70cAL0oCj29HVNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eSRUZFyFI2RhdGEXlbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU2lzc3Vlck5hbWW7F1VuaXZlcnNhIFJlc2VydmUgU3lzdGVtvRgnlb0YI2tleXO9LkthZGRyZXNzZXMOF0N1YWRkcmVzc7w1EBfN0oOhamb6PYvDVM9uSj6Nr1kH8bgyXDDtvvM+83AC5kI8+wU+onBC2itM6ZdN021HE2Q9U0tleUFkZHJlc3M9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZAW9Lb0uU2NyZWF0ZWRfYnkflTtjcmVhdG9yvRe9Jj29Gb0veQ8jaVyFvTAXvRu4K70nwFDDvSYnlb0mvTa9Lr03Dhe9OrwlEPTSqn5fTacqah6oyKuiPrsWFcgG4I84NeD2N2nAZwEpJGmx/j29PD29PUNyZXZpc2lvbkAzb3JpZ2luFy28YB8SqEIWBUVSqvyhzCo4ki/sehrzHsOMM0YyJsy+iZsy01lX+khTPjTxD2O8b9Dzo1Yyp3JI0BRdH43umqu5LK5CypkA55P80w6YEL0F1AzDFe9WuTiTjcBJBTdVNJrspj1FU2V4cGlyZXNfYXR5JDtpa4UzcGFyZW50JWt0cmFuc2FjdGlvbmFsBT2DVW5pdmVyc2FDb250cmFjdBtuZXe9Ljt2ZXJzaW9uGA=="

    // B1_UPACK = dec64 "JyNkYXRhxAIEHxtuZXcGQ3Jldm9raW5nDhczX190eXBlM0hhc2hJZFNjb21wb3NpdGUzvGDJ0tgAkpDWJsXM633avloaTSlOIGvh3HN8Trkil4kp/oXc7N3d94op76nD1ev1YlReOmKzHfAYZr+GFI0G66zHybE+wBkF5itn1iVxoQ6nLdADMQdRipvMG9s0YIUJiXRDY29udHJhY3QvS2FwaV9sZXZlbBg9g1VuaXZlcnNhQ29udHJhY3RTZGVmaW5pdGlvbjcjZGF0YRdTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0jbmFtZbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU3JlZmVyZW5jZXMdW3Blcm1pc3Npb25zLzNtNDVPYTQ3raNkZWNyZW1lbnRfcGVybWlzc2lvbkttaW5fdmFsdWUAI3JvbGUfW3RhcmdldF9uYW1lK293bmVyPUNSb2xlTGlua60zQG93bmVyQ21heF9zdGVwClNmaWVsZF9uYW1li3RyYW5zYWN0aW9uX3VuaXRzPbNDaGFuZ2VOdW1iZXJQZXJtaXNzaW9uM1kxTnA2ei+tvRy9HQC9Hh+9IDNpc3N1ZXI9vSKtO0Bpc3N1ZXK9JbN0ZXN0X3RyYW5zYWN0aW9uX3VuaXRzPb0nM1hXZmtkbTetvRy9HQC9Hr0fvSQKvSW9LT29JzNvUWw5Y28vrb0cvR0AvR69Kr0lvSY9vSczSElSaXZSH70evSo9g1Jldm9rZVBlcm1pc3Npb26tM3Jldm9rZVNjcmVhdGVkX2F0eWJUFVyFvSsvS2FkZHJlc3Nlcw4XPVNLZXlBZGRyZXNzQ3VhZGRyZXNzvDUQF83Sg6FqZvo9i8NUz25KPo2vWQfxuDJcMO2+8z7zcALmQjz7BT6icELaK0zpl03TbUcTZCNrZXlzHT1TU2ltcGxlUm9sZa29Kzthbm9uSWRzHStyb2xlcx0rc3RhdGVfvSEvvTgOFz29O708vCUQ9NKqfl9NpypqHqjIq6I+uxYVyAbgjzg14PY3acBnASkkabH+vT4dPb0/rb0hvUAdM3BhcmVudDVTZXhwaXJlc19hdHliOxprhY0XvSY4vS3ADye9Fx1LYnJhbmNoX2lkBTNvcmlnaW4XPUVNvGD0pDq4LLGW+hr5vltRbkIi40w0t8l7Aso7o763A3WV6rYG/D9zzcoyuXBzRzdlvKPA01wps1BNbYMJGVM5ebp8R1KzcG6gjNnPzdIKclDXp8aqBF6fMHhwaoEwZSYvrYu9NnlwEWFchVNjcmVhdGVkX2J5Hz29P607Y3JlYXRvcr04vUVDcmV2aXNpb24gvUEda3RyYW5zYWN0aW9uYWwFI3R5cGVTdW5pY2Fwc3VsZTt2ZXJzaW9uGFNzaWduYXR1cmVzDsSoAhcjZXh0c8SXAScba2V5vCEHYzrflPR6iyEXYDWaNmbpPSihVw++LkpAL5ffffmJwQozc2hhNTEyvEBxC5u9fGSLXrn41ORUoeG2/dizM9AThLiN0OYm0icjtZCkPVZXZgZ7Vnb+9sZpPdV77AsOpQmCGs3Gqk8yBUu0U2NyZWF0ZWRfYXR5chFhXIU7cHViX2tlecQKAR4IHAEAAcQBAQDj0N8v56I/6jGICg7jWg9XOkZdco8SVr8rkxGUizp8YOZnxfm11opBhfuQbHW+nAZSAZ9dYQC57Xo/g1QPG20DJ948TOiAXnIFDEvnMOHOgJjmHF0srY42C7fZBCWoO9OcEC1aEvNUnZLiQ6nDUTYOd+rwUc+UekSoIH6aHvF4MO1QP2k4TepTQNAdL/J1g8dnhLkp0e8kgsc41gsKTVYTcaYMDDL/1nuZNH9kqokjGOgOaFdMiRPvvQVq5KYSi8R0pCL0AMpiTdqn1gxV8kQuGU1/qaVoWdLeTdt6ID91mthgFLLQPvy2hddIu8/g+ujNkZpDvLfU0YbYOB+5c4RTI3NpZ27EAAHdj6o2oKnjaB1eq+li67TGQ3jZ/FR3orZRtoQcM9AXA7xgEKhYetwOden9DVvcNy2vTY+tUlXPMUg2sdWOGB7rugJuupS/nwV58knN8mPS1RdrtwfGkpbDM/Ga9Y1icIKI2rHikkUQMFoKgZv+FIPY7pT54J7hk//+2khQCjen/zu1Mz+RzMIHOfY66GTKDyHpM+TT36HKBjyOVvfuZCKb6S60vurbk8gin073zG8pMT9lgG6gCc2IFgqA7+xvSS6VY08jWBJ5eH5aFY5ihL17W9So3dPqxQRpv08JxSZSkxQddTF7gYl8fKGhBuOmtWJ6Z+AKxRokScMpZM1RVVv0"
    // B1_UPACK = dec64 "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHYzrflPR6iyEXYDWaNmbpPSihVw++LkpAL5ffffmJwQozc2hhNTEyvEDH4A1egdqzNMHeXme42zzeYMh5zr+hFt0rRDUsTXhNKDJB/tWRVX8GWIBwOXgCsKQmKF8mh5QiACx7AawTw+ryU2NyZWF0ZWRfYXR5M09kXIU7cHViX2tlecQJAR4IHAEAAcQAAePQ3y/noj/qMYgKDuNaD1c6Rl1yjxJWvyuTEZSLOnxg5mfF+bXWikGF+5Bsdb6cBlIBn11hALntej+DVA8bbQMn3jxM6IBecgUMS+cw4c6AmOYcXSytjjYLt9kEJag705wQLVoS81SdkuJDqcNRNg536vBRz5R6RKggfpoe8Xgw7VA/aThN6lNA0B0v8nWDx2eEuSnR7ySCxzjWCwpNVhNxpgwMMv/We5k0f2SqiSMY6A5oV0yJE++9BWrkphKLxHSkIvQAymJN2qfWDFXyRC4ZTX+ppWhZ0t5N23ogP3Wa2GAUstA+/LaF10i7z+D66M2RmkO8t9TRhtg4H7lzhFMjc2lnbsQAAY2SAlrPchWSfQBx6vDV1SzPcv2wxq/S4tJsKoiOHFb1Qetx61i0rKpOdvUh9gjGv6FbotPY61HvgQJEDCfEH+YmZ1UN+qEFcLQGPCyz0hMTKpwsFgGdHppunO1UyHAwgGLIU9oTJBEU0zS3AhVOWcWrF9SMDjz+yHr8HKd2uF8yIQ9owwSZ+Rh7VimL3RsgMuXu8mHTN1NJhD2TKegdK5jwyB9cEYPoIqy8pp0U0LtdZYUQ7zucAQhbtu9I7cN0II70WA1/CYhmLAncZ864m2Z64sIK0glNfCEwaUBzN9Lyv3AX5N4zGrA4ezmQRGXHaw6mGAPJtxa7ZBcMeuw+rt4jdHlwZVN1bmljYXBzdWxlI2RhdGHE9AMfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgl6b4PF5WCqKdFLSdIqtoVapbL/mDl+vpcBJu7ZVrWFwX6xIejZrvHpYYSrMmY5hbejRJURWqzyKNgUxQfudmI2e6zYuBt8kfLki6o6S0PDH7+3GGOy8wUN0gHThjzE++M19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbjdbcGVybWlzc2lvbnMvM1kxTnA2ei8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7QGlzc3Vlclt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWzdGVzdF90cmFuc2FjdGlvbl91bml0c0ttaW5fdmFsdWUAPbNDaGFuZ2VOdW1iZXJQZXJtaXNzaW9uM200NU9hNDeVnaUflTNAb3duZXK9Fytvd25lcj29Gb0ai3RyYW5zYWN0aW9uX3VuaXRzvRwAQ21heF9zdGVwCj29HTNvUWw5Y28vlZ2lrb0avSO9HAA9vR0zSElSaXZSH5UzcmV2b2tlpa09g1Jldm9rZVBlcm1pc3Npb24zWFdma2RtN5Wdpb0gvRq9G70cAL0kCj29HVNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eWJUFVyFI2RhdGEXlbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU2lzc3Vlck5hbWW7F1VuaXZlcnNhIFJlc2VydmUgU3lzdGVtK3JvbGVzvS69GCeVvRgja2V5c70uS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvDUQF83Sg6FqZvo9i8NUz25KPo2vWQfxuDJcMO2+8z7zcALmQjz7BT6icELaK0zpl03TbUcTZD1TS2V5QWRkcmVzcz1TU2ltcGxlUm9sZStzdGF0ZV9LYnJhbmNoX2lkBb0tvS5TY3JlYXRlZF9ieR+VO2NyZWF0b3K9F70iPb0ZvS95M09kXIW9MBe9IzC9G8APJ70iJ5W9Ir03vS69OA4XvTu8JRD00qp+X02nKmoeqMiroj67FhXIBuCPODXg9jdpwGcBKSRpsf49vT09vT69Nb0uQ3JldmlzaW9uKDNvcmlnaW4XLbxg9KQ6uCyxlvoa+b5bUW5CIuNMNLfJewLKO6O+twN1leq2Bvw/c83KMrlwc0c3ZbyjwNNcKbNQTW2DCRlTOXm6fEdSs3BuoIzZz83SCnJQ16fGqgRenzB4cGqBMGUmL62LPUVTZXhwaXJlc19hdHliOxprhTNwYXJlbnQla3RyYW5zYWN0aW9uYWwFPYNVbml2ZXJzYUNvbnRyYWN0G25ld70uO3ZlcnNpb24Y"
    B1_UPACK = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHYzrflPR6iyEXYDWaNmbpPSihVw++LkpAL5ffffmJwQozc2hhNTEyvEDYdEPLS8iP9bO9DxNMOksIhUfPsCcInA1BDNi1D/zbZFS6NPdQ5JXwMQOvKb6/V4xBvMahJyR456SpojpvuDECU2NyZWF0ZWRfYXR5P0RpXIU7cHViX2tlecQJAR4IHAEAAcQAAePQ3y/noj/qMYgKDuNaD1c6Rl1yjxJWvyuTEZSLOnxg5mfF+bXWikGF+5Bsdb6cBlIBn11hALntej+DVA8bbQMn3jxM6IBecgUMS+cw4c6AmOYcXSytjjYLt9kEJag705wQLVoS81SdkuJDqcNRNg536vBRz5R6RKggfpoe8Xgw7VA/aThN6lNA0B0v8nWDx2eEuSnR7ySCxzjWCwpNVhNxpgwMMv/We5k0f2SqiSMY6A5oV0yJE++9BWrkphKLxHSkIvQAymJN2qfWDFXyRC4ZTX+ppWhZ0t5N23ogP3Wa2GAUstA+/LaF10i7z+D66M2RmkO8t9TRhtg4H7lzhFMjc2lnbsQAAQLZP5tjM1khChOooTIWSLrE1i+VMyqYzrtXGeKctZjwunwNXWnneF392zJ5SABIMRs7AtMexjZhogzE67yn+4ZDas8A/FYcawvf+7isbVWEVQ32JxyvrUFbzJU4IE/jd17XJGKQq/fq2Drz8gHsg4IkKur1b1WJeVx5Q1Hwucmz7bGpKtcSQ/dw/kFHc6Ju1HGgc1FTp2sJAh1DWoAygv98TPwUI4V0+PEy4YtZny/uHmpLzTv/X8b+OWjSOYCxaVfij+AfG0WQTM+BywutcjCC5vuLK0/LLtPdhvSdyCd8VAF0qZg/XiU36EmCShCgSoSj3j6IfD2vET9TzlG0G6sjdHlwZVN1bmljYXBzdWxlI2RhdGHE6AMfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgnvNFEw0pMgIgWXyQG53J7EsWaMJ/6ktU2Ck13Gk37oTapKOa6x513UWFq0OhREr3UmKWS8OWj8Udir/fpv5066sNw13AgoD9N2VRck+C4eEFDxOBkVQLfo6yF6M5tK5+M19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMvM3NjSFc3ZC8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7QGlzc3Vlclt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWLdHJhbnNhY3Rpb25fdW5pdHNLbWluX3ZhbHVlAD2zQ2hhbmdlTnVtYmVyUGVybWlzc2lvbjNhcThfWjcvlZ2lrb0as3Rlc3RfdHJhbnNhY3Rpb25fdW5pdHO9HAA9vR0zUUJhR0VuN5WdpR+VM0Bvd25lcr0XK293bmVyPb0ZvRq9G70cAENtYXhfc3RlcAo9vR0zNnFHRXZON5Wdpb0jvRq9IL0cAL0mCj29HTNyS014cngflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eUciaVyFI2RhdGEXlbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU2lzc3Vlck5hbWW7F1VuaXZlcnNhIFJlc2VydmUgU3lzdGVtvRgnlb0YI2tleXO9LkthZGRyZXNzZXMOF0N1YWRkcmVzc7w1EBfN0oOhamb6PYvDVM9uSj6Nr1kH8bgyXDDtvvM+83AC5kI8+wU+onBC2itM6ZdN021HE2Q9U0tleUFkZHJlc3M9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZAW9Lb0uU2NyZWF0ZWRfYnkflTtjcmVhdG9yvRe9JT29Gb0veT5EaVyFvTAXvRuovSDAwF29JSeVvSW9Nr0uvTcOF706vCUQ9NKqfl9NpypqHqjIq6I+uxYVyAbgjzg14PY3acBnASkkabH+Pb08Pb09Q3JldmlzaW9uIDNvcmlnaW4XLbxgXYWxGLnzVuJzur9OtFAlUt73sxOtU1iSl/jeD17B3c+KPNrQC/nWkD/Fxz5k+7ql93Q45sw0XGmFmE0gnraWIwNtBm3oTr53LN4EANBdIdtRMHgcu9VgJDeq8AUbu14BPUVTZXhwaXJlc19hdHlHCW5rhTNwYXJlbnQla3RyYW5zYWN0aW9uYWwFPYNVbml2ZXJzYUNvbnRyYWN0G25ld70uO3ZlcnNpb24Y");
    B1_PRIVATE = dec64("JgAcAQABvIEA+Ih4oBmVFmVOb7lwUwQC3CuQBrVlNOMINm86z0XpveQYHPO5LAcHFXND8pJh/EEzeSaRpgFU6sHBbBnSoL1P44vG/cfvlxRZIK5bBqajcQKvdeNeFmZ+olfHmRBg9f6tVRBtwQs2XLZbgD9MZbaymgChbUZdjqCmSiL1iIUswFe8gQDqqQ9ICWHVx9LaaZzCEE67eUBOuPdTQAFUTg/BijhJebCuaOjFj3v+4HWk6Sfzi/YtqROGm76cslfgs9uXuXEVLkFB3MWTBTCPwLtLSDrK4pLc3xG1GybLcPbXJgwfR9yvN0y1YLR63RO+HLTEYkfYp1xsEYtQPT9dv3cXqCQuZQ==");
    Unitest.addTest('split with big count of contracts', async function () {
      var TP, UPack, UTNContracts, UTNStatePromises, cryptoCloudAPI, mainContract, newContracts, nodeApi, parcel;
      UTNContracts = ["J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHXflUpTHWBiY8LzghkB4wjglXZjTWGAEj+VVEAThhzgMzc2hhNTEyvEB7e+a0xqDLC4Y+T5p5IT0mk7Q8wGNbT6C0rpvgoP/KiXfEKrEp/MliNl3BDHskDQS6QEzrF60QQRQ98+CkZirfU2NyZWF0ZWRfYXR5eV9MXoU7cHViX2tlecQJAR4IHAEAAcQAAbf++ZrdhYfNVUcCnEVbsc5KNYhHDEEGxCzxMzk1CGP7vtK9ktgLw1FKE+VAhoRfthTerpr+y1HhxV3laCjBOFZ32Wnhrrgb9OnGvG6mp+wQc1CvzNWb4LDcQwa87O9vB5Z7+r897DMHnJrZlESBKDlSr0CUI6SS8eWyXzUB5pdXdA6fV2obyQ82vax5rVII6zPvXSugLOvWKpM/2Xiwt+G8S+jS0B2n2aFZeoGsZF6zO8xhcdEGSXlzXiJwfNivjhWQt5RTDejJkrcn9fzd6frY6VU/IRKHpwLE27qUCbfj2YImKqDEctVsFEqpyyPNljTMYRBa7OnIJskA0gvH6ycjc2lnbsQAAYlsJJUyPV3UgbYjdTeutPMVwR+5KlB/b6lsIeSyNdM9ks0CFBGgTgTJd6r8/ZLFAuwcD6/S9X8nwXdR0+XX5NZDtsKxWmXCS/akbl6sJ42MX9UFzkFH0R3ax9FGtLVnBOYWhlOvoajUt5jTSHkh77AItwgtj2SwM3sYLZziKbSAwnWfx1PHgebtTSPEVqzdHohhXFNiBWqH5x4wu99n55avdMZvg1gTo0hCXGZwJp8pJvD5JNudmTpge6rJC2bGYNSOoq06DwfFUP9TJ/pLEDGEDigqTwjx0IMaRFP33x7eSMP0ZzCOvlYUpC5Qd8ute2+b5YvSWKb8UwVRLurt6cYjdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgoCjfFtx5VDUnSwP83SU5J/ZZicWd8wgisxQZ+09gkAExrIUIS/s2NlkS5kcRffke16tBj3CXUFiHij9vs+nC6labomVA+ZdUK3hjKYLjTXMZW0VZkdGzotO1ZyfwU3HlM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxNDQwNjoxvSu9LFNjcmVhdGVkX2J5J5U7Y3JlYXRvcr0/vSy9Sw4XQ3VhZGRyZXNzvCUQaiwWfT8BD1HGFZqqeGFta/7yi5zWsCiWQhm84wgQRfHdxOxUPVNLZXlBZGRyZXNzPb1MvS15f19MXoW9Lg+9H6M1LjAwMDAwMDAwMDAwMDAwMDAwML0YJ5W9GL0/vSy9S71UPb1MQ3JldmlzaW9uwEc4M29yaWdpbhctvGA0+jh0iQ12Bh8aI2t0TGhfTTf6UVP93jk4DoaJ+ZxGhPPFJFKblzmMMcFJNoBL5CV643u21fWtO9JBscgiqRwr/NaPH98Kk/3OLCyBdvLIK1SEuo/0bhhn7MRj/Iv8ZUQ9RVNleHBpcmVzX2F0eR4gSiD7M3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=", "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHXflUpTHWBiY8LzghkB4wjglXZjTWGAEj+VVEAThhzgMzc2hhNTEyvEBB+N6LUl63KOwp0QHG1yWD7DWJNwXokanvqmrjV40kf0txtIbMoBBkJSlF+CiQYQTGv9c4JnG8uUrou1KZorJtU2NyZWF0ZWRfYXR5LWBMXoU7cHViX2tlecQJAR4IHAEAAcQAAbf++ZrdhYfNVUcCnEVbsc5KNYhHDEEGxCzxMzk1CGP7vtK9ktgLw1FKE+VAhoRfthTerpr+y1HhxV3laCjBOFZ32Wnhrrgb9OnGvG6mp+wQc1CvzNWb4LDcQwa87O9vB5Z7+r897DMHnJrZlESBKDlSr0CUI6SS8eWyXzUB5pdXdA6fV2obyQ82vax5rVII6zPvXSugLOvWKpM/2Xiwt+G8S+jS0B2n2aFZeoGsZF6zO8xhcdEGSXlzXiJwfNivjhWQt5RTDejJkrcn9fzd6frY6VU/IRKHpwLE27qUCbfj2YImKqDEctVsFEqpyyPNljTMYRBa7OnIJskA0gvH6ycjc2lnbsQAARVAXGsstryClsqEPvf13r2cDsbFeEQWCekA6EtII0iUYGi6apWsC2x/olfXhFy9AwHJ1SqHt8LsMh57+Gx6CA+5/UUI6LSEPKLwRpJonI9uGO5aPE6ykDRw3vlVOIvM5mnYbWjLw0YxgCR3a55kRY2WJV+uChBbF4/fqQZ13UV6Awudq4LFFJlPan4XWIP/2qJVTw1ExOSRdlzL+OKamcdU+7i5ov6kI8dmld2iFuC3z3mSOQoRRXmRsI5YkNbuZeIbD7L+2KYWU2s49mL4xBA4OnlBLFpCuiUzA7fgCnYdK9jsvESfusYPBaUjQC5fptLgrqpSswu7L5cSPlQyBYQjdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgZHL5vrnh4pwePPRgfgFVnKdbdLbk5mIxygztpt5P+mKkysZzoxFGeNGexPuYXPqVplT7ucjQs3ctaS1HeEZJwZkVWVdBTJ5RbQJ397SU5iigFPBWyuXLwrzyAUyPDWelM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxNDQxMDoxvSu9LFNjcmVhdGVkX2J5J5U7Y3JlYXRvcr0/vSy9Sw4XQ3VhZGRyZXNzvCUQaiwWfT8BD1HGFZqqeGFta/7yi5zWsCiWQhm84wgQRfHdxOxUPVNLZXlBZGRyZXNzPb1MvS15Z2BMXoW9Lg+9H6M1LjAwMDAwMDAwMDAwMDAwMDAwML0YJ5W9GL0/vSy9S71UPb1MQ3JldmlzaW9uwEs4M29yaWdpbhctvGA0+jh0iQ12Bh8aI2t0TGhfTTf6UVP93jk4DoaJ+ZxGhPPFJFKblzmMMcFJNoBL5CV643u21fWtO9JBscgiqRwr/NaPH98Kk/3OLCyBdvLIK1SEuo/0bhhn7MRj/Iv8ZUQ9RVNleHBpcmVzX2F0eR4gSiD7M3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=", "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHXflUpTHWBiY8LzghkB4wjglXZjTWGAEj+VVEAThhzgMzc2hhNTEyvEARC/9IPYRJrt6Z5S1666lZsHf1ONlLKlBb047F6aAuEzp4jM8wIS5Z8n7x+DlJrYvK9qUsKP5j339j3VTArIzKU2NyZWF0ZWRfYXR5b2BMXoU7cHViX2tlecQJAR4IHAEAAcQAAbf++ZrdhYfNVUcCnEVbsc5KNYhHDEEGxCzxMzk1CGP7vtK9ktgLw1FKE+VAhoRfthTerpr+y1HhxV3laCjBOFZ32Wnhrrgb9OnGvG6mp+wQc1CvzNWb4LDcQwa87O9vB5Z7+r897DMHnJrZlESBKDlSr0CUI6SS8eWyXzUB5pdXdA6fV2obyQ82vax5rVII6zPvXSugLOvWKpM/2Xiwt+G8S+jS0B2n2aFZeoGsZF6zO8xhcdEGSXlzXiJwfNivjhWQt5RTDejJkrcn9fzd6frY6VU/IRKHpwLE27qUCbfj2YImKqDEctVsFEqpyyPNljTMYRBa7OnIJskA0gvH6ycjc2lnbsQAATmJHfZ6Uo2g4WuPI6xm+MX7o1Ly/QYL77FuJIvOkJO8/d5gsILeHkd6KORqLzovudJRMFFkfBoQL5gyVuUN2Z2es4kzNrPcfvScphgUbQztkcXS+hppUXwvRWcURShJNqMkN/z3F59PBXUqwQX3+QJkMBnRxVgjYMVebZYRZXHuy9DwCPqu1EQA8VJsmUAQZ0KN6wTrQ71128u7EDMdXwgcHmbhhgDIYer5ETqmRScgieTPu2RzwhUQ38BRQOr03N5/uLjRxr1M8i498hVO4NxseiJQL/ZcRg4dAb7k7PvVgxpFvUzM4eBGk/EHbKCPvyynqFdiA1qNjWytgwuSwmojdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xg0NCZXn8LXG2RU5mZ7v4cQ4Aq37uPlOS1Z2GEe46y0d9+rZq8cwvXUqT3bAwK0JtSC9c//raInUKV6se/KStCM4ItR9bppjds84KUrGGetu7vOVbjtsW38ijh2lna59KeM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxNDQxNDoxvSu9LFNjcmVhdGVkX2J5J5U7Y3JlYXRvcr0/vSy9Sw4XQ3VhZGRyZXNzvCUQaiwWfT8BD1HGFZqqeGFta/7yi5zWsCiWQhm84wgQRfHdxOxUPVNLZXlBZGRyZXNzPb1MvS15Z2FMXoW9Lg+9H6M1LjAwMDAwMDAwMDAwMDAwMDAwML0YJ5W9GL0/vSy9S71UPb1MQ3JldmlzaW9uwE84M29yaWdpbhctvGA0+jh0iQ12Bh8aI2t0TGhfTTf6UVP93jk4DoaJ+ZxGhPPFJFKblzmMMcFJNoBL5CV643u21fWtO9JBscgiqRwr/NaPH98Kk/3OLCyBdvLIK1SEuo/0bhhn7MRj/Iv8ZUQ9RVNleHBpcmVzX2F0eR4gSiD7M3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=", "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHXflUpTHWBiY8LzghkB4wjglXZjTWGAEj+VVEAThhzgMzc2hhNTEyvEDAOa4fbo/mPvjruyFryn3jNF/UN6e2wJ9otaob2+gEnEmySUsYK8O3SGeG1n7NDAxIpzxB8t9L0G6bu+mLKjaBU2NyZWF0ZWRfYXR5eGFMXoU7cHViX2tlecQJAR4IHAEAAcQAAbf++ZrdhYfNVUcCnEVbsc5KNYhHDEEGxCzxMzk1CGP7vtK9ktgLw1FKE+VAhoRfthTerpr+y1HhxV3laCjBOFZ32Wnhrrgb9OnGvG6mp+wQc1CvzNWb4LDcQwa87O9vB5Z7+r897DMHnJrZlESBKDlSr0CUI6SS8eWyXzUB5pdXdA6fV2obyQ82vax5rVII6zPvXSugLOvWKpM/2Xiwt+G8S+jS0B2n2aFZeoGsZF6zO8xhcdEGSXlzXiJwfNivjhWQt5RTDejJkrcn9fzd6frY6VU/IRKHpwLE27qUCbfj2YImKqDEctVsFEqpyyPNljTMYRBa7OnIJskA0gvH6ycjc2lnbsQAAUFU3bw1LP+HE+e8s9Iw5nRP/dStG9scw9Ukpz4Q4bzGaB4UafXGVfOwQKBTI5efrP8GRfSxPXvW5eCW6hy93Qex5ru2bTHdbTPZ6AFxhRkSd9YVjZ7hI6hFXqYMXKA0iYW6+2q+xn+Lws/BWIbYxX9ZgO0TiJUlamRTUsJNzyhXGmvnEgAK4QiRWnl0wipqUuqREm1YMwX52cUhtO0U+zL8ZNp1mBGhmgnX7KmhExAH1rdRcxprBTmF8pPet2UbQS1olrA+599lkDSE9ptYg2yj3DaABSUnMhUb7P9jiyeeTGHl/DwXfvEnO9HVtwbkLMPxxqKru5xW1wSlwQ5w9iwjdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgWp6Kq9KWJA8h7foTUQzXB5qgELBAlX3f8H3PvFY6fDcfz64H+Li2yoFF7/AH0ZQUJa4HjJc0DuzcB5mYfkbKMqPT6qxMCj2zMGzfjSq/tJDhGmnvPaSsvO5nlx8+8eC0M19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxNDQxNToxvSu9LFNjcmVhdGVkX2J5J5U7Y3JlYXRvcr0/vSy9Sw4XQ3VhZGRyZXNzvCUQaiwWfT8BD1HGFZqqeGFta/7yi5zWsCiWQhm84wgQRfHdxOxUPVNLZXlBZGRyZXNzPb1MvS15eGFMXoW9Lg+9H6M1LjAwMDAwMDAwMDAwMDAwMDAwML0YJ5W9GL0/vSy9S71UPb1MQ3JldmlzaW9uwFA4M29yaWdpbhctvGA0+jh0iQ12Bh8aI2t0TGhfTTf6UVP93jk4DoaJ+ZxGhPPFJFKblzmMMcFJNoBL5CV643u21fWtO9JBscgiqRwr/NaPH98Kk/3OLCyBdvLIK1SEuo/0bhhn7MRj/Iv8ZUQ9RVNleHBpcmVzX2F0eR4gSiD7M3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=", "J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHXflUpTHWBiY8LzghkB4wjglXZjTWGAEj+VVEAThhzgMzc2hhNTEyvEBkI+7KLZ08JWHEKDn736WbkV7q5WxUFtkDsC5LUKle82ENVh1KFjPs5eKiu+WAxLVlUS3LcaM/2FPSOWEKSg84U2NyZWF0ZWRfYXR5TWJMXoU7cHViX2tlecQJAR4IHAEAAcQAAbf++ZrdhYfNVUcCnEVbsc5KNYhHDEEGxCzxMzk1CGP7vtK9ktgLw1FKE+VAhoRfthTerpr+y1HhxV3laCjBOFZ32Wnhrrgb9OnGvG6mp+wQc1CvzNWb4LDcQwa87O9vB5Z7+r897DMHnJrZlESBKDlSr0CUI6SS8eWyXzUB5pdXdA6fV2obyQ82vax5rVII6zPvXSugLOvWKpM/2Xiwt+G8S+jS0B2n2aFZeoGsZF6zO8xhcdEGSXlzXiJwfNivjhWQt5RTDejJkrcn9fzd6frY6VU/IRKHpwLE27qUCbfj2YImKqDEctVsFEqpyyPNljTMYRBa7OnIJskA0gvH6ycjc2lnbsQAARDVOkUGIh4EnvkeLYk3PwWUa4U8MrzhEVpS/wtznbJJJ41ynIqSJ2XX+BgB4uRUZDgUxYMjk6hGLKh2FzTWR8lS2DaCJT53WLQ7xdZ6/wE2wOPxVG0l/aFMVr2txnZOwMpwK2z0Wm1Kb7wjB+6CJpKiBetb6kygCZwHB1kg4Fc0l8E87h0pf+OCLxQHosyrVJv3e2k58NTJpNTU1n8cxiVLWBvTrXxKkqWD2LIxQGNuKK8zkkeo9OZ/7sv9ZzIy+sYwOM4tONVDOGsMivzB7NXg+/2U6KMFvuqJaEQNUdLUXY6pSloiz7r2GbKtjPZz9vSZpSknXdQ7pfo61XkoWTcjdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgDXBir/2pB+XT9auyMx64kkaQqAn1VyA8dRBZc6gJjWuZzdsOUP/0XhT+VvBYoAFdzlOhhS6AyUxqUR2trR8zfrvHADdQaf9tImXTc3IK8jEizrIjcIAT8AukpPJLRHeDM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBiNkYXRhR6tjb250cmFjdF9vd25lcl9lbnRpdHm7GVVuaXZlcnNhIENvcnBvcmF0aW9uIEx0ZC5Tc2hvcnRfbmFtZRtVVE5rRVJDMjBfYWRkcmVzc7sqMHg5ZTMzMTk2MzZlMjEyNmUzYzBiYzllMzEzNEFFQzVlMTUwOEE0NmM3M3RpY2tlcr0yW2Rlc2NyaXB0aW9uuzw0LDk5Nyw4OTEsOTUyIFVUTiB3ZXJlIGNyZWF0ZWQgb24gSnVuZSAxM3RoIDIwMTggYXQgMTM6MTM6MTOVo1VUTiAtIFVuaXZlcnNhIFRva2VuZcMzBFVUTiBpcyBkaWdpdGFsaXNlZCBjb3Vwb24gYWxsb3dpbmcgeW91IHRvIHV0aWxpc2UgYW55IFVuaXZlcnNhLmlvIHRyYW5zYWN0aW9uIChpLmUuIHRvIHJlY2VpdmUgYW55CuKAnHNlcnZpY2Vz4oCdIGltcGxpZWQgYnkgdGhlIHBhcnRpY3VsYXIgdHJhbnNhY3Rpb24pIGF0IHRoZSBwcmljZSBhdCB0aGUgVXRpbGlzYXRpb24gRGF0ZS4KVGh1cywgZnJvbSBsZWdhbCBwcm9zcGVjdGl2ZSwgdGhlc2UgVG9rZW5zIGFyZSB5b3VyIHByb3ByaWV0YXJ5IHJpZ2h0cyB0byByZWNlaXZlIHBhcnRpY3VsYXIgdmFsdWVzCihVbml2ZXJzYS5pbyDigJxzZXJ2aWNlc+KAnSkuIFV0aWxpc2F0aW9uIOKAkyBVc2Ugb2YgVG9rZW4gZm9yIHBheWluZyB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbiByZW5kZXJlZCBieQpVbml2ZXJzYS5pbyBwbGF0Zm9ybS4gT3duZXJzaGlwIG9mIFRva2VucyBjYXJyaWVzIG5vIHJpZ2h0cywgZXhwcmVzcyBvciBpbXBsaWVkLCBvdGhlciB0aGFuIGl0IGlzIGRlZmluZWQKaW4gcHJldmlvdXMgc2VudGVuY2VzLiBJbiBwYXJ0aWN1bGFyLCB5b3UgdW5kZXJzdGFuZCBhbmQgYWNjZXB0IHRoYXQgVG9rZW5zIGRvIG5vdCByZXByZXNlbnQgb3IgY29uZmVyCmFueSBvd25lcnNoaXAgcmlnaHQgb3Igc3Rha2UsIHNoYXJlIG9yIHNlY3VyaXR5IG9yIGVxdWl2YWxlbnQgcmlnaHRzLCBvciBhbnkgcmlnaHQgdG8gcmVjZWl2ZSBmdXR1cmUKcmV2ZW51ZSBzaGFyZXMsIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMgb3IgYW55IG90aGVyIGZvcm0gb2YgcGFydGljaXBhdGlvbiBpbiBvciByZWxhdGluZyB0byB0aGUKTmV0d29yayBhbmQvb3IgQ29tcGFueSBhbmQgaXRzIGNvcnBvcmF0ZSBhZmZpbGlhdGVzLCBvdGhlciB0aGFuIHJpZ2h0cyByZWxhdGluZyB0byB0aGUgcHJvdmlzaW9uIGFuZCByZWNlaXB0Cm9mIFNlcnZpY2VzIGluIHRoZSBVbml2ZXJzYSBOZXR3b3JrLiBUaGUgVG9rZW5zIGFyZSBub3QgaW50ZW5kZWQgdG8gYmUgYSBkaWdpdGFsIGN1cnJlbmN5LCBzZWN1cml0eSwKY29tbW9kaXR5IG9yIGFueSBvdGhlciBraW5kIG9mIGZpbmFuY2lhbCBpbnN0cnVtZW50LgpzY29udHJhY3Rfb3duZXK7IVVuaXZlcnNhLmlvIC0gVW5pdmVyc2EgQmxvY2tjaGFpblNjcmVhdGVkX2F0eR4yCVmFM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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M3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlV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OzN9co3sjX3MeJSL4QnXnc5GcO6e/0CPTjImrpGdj2cbKSrcN7BS11u3sySMxtW47Q1atyhDPUVDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+lM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/pVNzcGxpdF9qb2lutb0XU2ZpZWxkX25hbWUzYW1vdW50S21pbl92YWx1ZaMwLjAwMDAwMDAwMDAwMDAwMDAwMUNtaW5fdW5pdL0ji2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW49m1NwbGl0Sm9pblBlcm1pc3Npb24zdzNDMHNmH6UzcmV2b2tltb0XPYNSZXZva2VQZXJtaXNzaW9uU3JlZmVyZW5jZXMGU2NyZWF0ZWRfYXR5HjIJWYUjZGF0YUerY29udHJhY3Rfb3duZXJfZW50aXR5uxlVbml2ZXJzYSBDb3Jwb3JhdGlvbiBMdGQua0VSQzIwX2FkZHJlc3O7KjB4OWUzMzE5NjM2ZTIxMjZlM2MwYmM5ZTMxMzRBRUM1ZTE1MDhBNDZjN1NzaG9ydF9uYW1lG1VUTjN0aWNrZXK9N1tkZXNjcmlwdGlvbrs8NCw5OTcsODkxLDk1MiBVVE4gd2VyZSBjcmVhdGVkIG9uIEp1bmUgMTN0aCAyMDE4IGF0IDEzOjEzOjEzpaNVVE4gLSBVbml2ZXJzYSBUb2tlbnXDMwRVVE4gaXMgZGlnaXRhbGlzZWQgY291cG9uIGFsbG93aW5nIHlvdSB0byB1dGlsaXNlIGFueSBVbml2ZXJzYS5pbyB0cmFuc2FjdGlvbiAoaS5lLiB0byByZWNlaXZlIGFueQrigJxzZXJ2aWNlc+KAnSBpbXBsaWVkIGJ5IHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uKSBhdCB0aGUgcHJpY2UgYXQgdGhlIFV0aWxpc2F0aW9uIERhdGUuClRodXMsIGZyb20gbGVnYWwgcHJvc3BlY3RpdmUsIHRoZXNlIFRva2VucyBhcmUgeW91ciBwcm9wcmlldGFyeSByaWdodHMgdG8gcmVjZWl2ZSBwYXJ0aWN1bGFyIHZhbHVlcwooVW5pdmVyc2EuaW8g4oCcc2VydmljZXPigJ0pLiBVdGlsaXNhdGlvbiDigJMgVXNlIG9mIFRva2VuIGZvciBwYXlpbmcgdGhlIHBhcnRpY3VsYXIgdHJhbnNhY3Rpb24gcmVuZGVyZWQgYnkKVW5pdmVyc2EuaW8gcGxhdGZvcm0uIE93bmVyc2hpcCBvZiBUb2tlbnMgY2FycmllcyBubyByaWdodHMsIGV4cHJlc3Mgb3IgaW1wbGllZCwgb3RoZXIgdGhhbiBpdCBpcyBkZWZpbmVkCmluIHByZXZpb3VzIHNlbnRlbmNlcy4gSW4gcGFydGljdWxhciwgeW91IHVuZGVyc3RhbmQgYW5kIGFjY2VwdCB0aGF0IFRva2VucyBkbyBub3QgcmVwcmVzZW50IG9yIGNvbmZlcgphbnkgb3duZXJzaGlwIHJpZ2h0IG9yIHN0YWtlLCBzaGFyZSBvciBzZWN1cml0eSBvciBlcXVpdmFsZW50IHJpZ2h0cywgb3IgYW55IHJpZ2h0IHRvIHJlY2VpdmUgZnV0dXJlCnJldmVudWUgc2hhcmVzLCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzIG9yIGFueSBvdGhlciBmb3JtIG9mIHBhcnRpY2lwYXRpb24gaW4gb3IgcmVsYXRpbmcgdG8gdGhlCk5ldHdvcmsgYW5kL29yIENvbXBhbnkgYW5kIGl0cyBjb3Jwb3JhdGUgYWZmaWxpYXRlcywgb3RoZXIgdGhhbiByaWdodHMgcmVsYXRpbmcgdG8gdGhlIHByb3Zpc2lvbiBhbmQgcmVjZWlwdApvZiBTZXJ2aWNlcyBpbiB0aGUgVW5pdmVyc2EgTmV0d29yay4gVGhlIFRva2VucyBhcmUgbm90IGludGVuZGVkIHRvIGJlIGEgZGlnaXRhbCBjdXJyZW5jeSwgc2VjdXJpdHksCmNvbW1vZGl0eSBvciBhbnkgb3RoZXIga2luZCBvZiBmaW5hbmNpYWwgaW5zdHJ1bWVudC4Kc2NvbnRyYWN0X293bmVyuyFVbml2ZXJzYS5pbyAtIFVuaXZlcnNhIEJsb2NrY2hhaW4zaXNzdWVyJ6W9PyNrZXlzFhcba2V5FzNwYWNrZWTECQIeCBwBAAHEAAKk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OzN9co3sjX3MeJSL4QnXnc5GcO6e/0CPTjImrpGdj2cbKSrcN7BS11u3sySMxtW47Q1atyhDPUVDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+lM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/pVNzcGxpdF9qb2lutb0XU2ZpZWxkX25hbWUzYW1vdW50S21pbl92YWx1ZaMwLjAwMDAwMDAwMDAwMDAwMDAwMUNtaW5fdW5pdL0ji2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW49m1NwbGl0Sm9pblBlcm1pc3Npb24zdzNDMHNmH6UzcmV2b2tltb0XPYNSZXZva2VQZXJtaXNzaW9uU3JlZmVyZW5jZXMGI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLlNzaG9ydF9uYW1lG1VUTmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzczdGlja2VyvTRbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM6WjVVROIC0gVW5pdmVyc2EgVG9rZW51wzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluU2NyZWF0ZWRfYXR5HjIJWYUzaXNzdWVyJ6W9PyNrZXlzFhcba2V5FzNwYWNrZWTECQIeCBwBAAHEAAKkTRd7S7eV9AXnDRzPYnMQLuzBCBJ1b8rE632c4OOPBLhaaMYk46IWNulMRA6srx62zHzP6HLMb7lp4VvnGhE6PUEIemMa8hyOl39AbZultVj43BYTe4DxMsTviCr7vw/yDnBrofD9OVWub8qI/j54VngYeI7/X0Gg9UMJTBvVhFOTQvii2zmgwZ02ZWadcGmUeBzlt3a19yQ37cv71qzmejQIqCxm4CfUXuw9iF4qFh+/qX+W7APoz6nyb0+m2SCSv45+5ZUTHj4Ist3bif9YAHpTjC4wHXByxOvOdI8PxNXfMPSVLL5InLVSo0Bd4S5sRVThFuT/Nk8F1FV/TQ730gpsXb8qdVRlazhP8g4mPh2FZBntm1XDbZN5Lx2ZcIC4niYBLHCFtdfAR9Gg7NE07Adswb0/FqiLZopYNu7EjKca3fE9MzwrtqN+C93gDBK/4MZwc3TcfWHv9ziKxatV/H6pBF+vUfk7rmTLbZZ3vZE7fwknDPxJ1r9mnEyrBNyBqmHG/uV0++DRwM8efzQGudSgbmMzs0Bc7KfmzxSMnf6ot4rObJrhsycg4dSfTsYVNGqH0BvOyi/QJqygSJIkdRMZJEilgtdJUphYmtGl6JargbTVwQyuiVy6Jtomk2GZ1dczS4ocIzvFaiOQ01xA/SKUNqxtY0Iy5KBqsAUirz1jUlNBUHVibGljS2V5PUtLZXlSZWNvcmQXvUQXvUbECQIeCBwBAAHEAAKl78HmQvITeTXBlDSsGrxmGre94RSjMTO05i3ivge3Gg4ACXRNzAXm49IsfHFwUKEqIbxU7CzG/Z1TNrKJVMHZgO0ZT6lWJyKzDKVR9dVXbQ0/aV1UeseVIdxghJkmSwQdz5c5Q8yB3LexfvWXEjKbcLPPudrZ5Nt98/Pat94nOUX5jT71evMDZtBCMR4JrcevCHc3TEMIAqG5V3A0pxLdF6smrebXYWxFLzYl7/Xet/jW/cVrUba+jwjOKGM8EpksH3t3BHPcPzV6qkZLUC/FWjiNoB0hgBhHWDPt9n3/DvaFakS+505WzK3Vz/GhsY6W3QpRYs6Pwsf7DOr5xazntO7mUn4GLxE/Ex9R8gZ6Mum7BJFbj7V6alrplOEXSJIzP1XOkKOC8VIkp4cV2LLuyEcnMAVdc+NVa0SPVagWuY7J5elNH1ApGouNIJS1mY13vwYAoWf4S+8VwDsG8GAs8mR/oXD2giB/hh8gK0sV/WmCDw+U6kwoSaOouYPk6uTTk307OZBDGWb4Rkxfim/KWvwZeaG2zvUMmLMyrQOdOKUpXuvx8V2/TVTP0FouczFSDQaZVWUeLdIqh4qOsCuq8/BHZ3JjAbnLNbX43V25jKCoYATcuqJL/Jqs4rNR8XuzuZYBHK9zHiZuqAu5oIcqiQFa9EXBeIggoJXkKfbmLT29SD29SUthZGRyZXNzZXO9Lj1TU2ltcGxlUm9sZStzdGF0ZVdLYnJhbmNoX2lkOzE0NDA0OjG9Lb0uvS8PvSGjNy4wMDAwMDAwMDAwMDAwMDAwMDC9PnkIfUxehVNjcmVhdGVkX2J5J6U7Y3JlYXRvcr1BvS69TQ4XQ3VhZGRyZXNzvCUQaiwWfT8BD1HGFZqqeGFta/7yi5zWsCiWQhm84wgQRfHdxOxUPVNLZXlBZGRyZXNzPb1OvRonpb0avUG9Lr1NvVg9vU5DcmV2aXNpb27ARTgzb3JpZ2luFy28YDT6OHSJDXYGHxoja3RMaF9NN/pRU/3eOTgOhon5nEaE88UkUpuXOYwxwUk2gEvkJXrje7bV9a070kGxyCKpHCv81o8f3wqT/c4sLIF28sgrVIS6j/RuGGfsxGP8i/xlRD1FM3BhcmVudCVTZXhwaXJlc19hdHkeIEog+2t0cmFuc2FjdGlvbmFsBT2DVW5pdmVyc2FDb250cmFjdBtuZXe9Ljt2ZXJzaW9uGA=="];
      UPack = Universa.Contract.fromBOSS(dec64(""));
      UTNContracts = UTNContracts.map(cnt => {
        return Universa.Contract.fromBOSS(dec64(cnt));
      });
      cryptoCloudAPI = await CryptoCloud.connectWithPassword(APP_TOKEN, 'output', 'adminadmin');
      nodeApi = await Node.connect(cryptoCloudAPI.privateKey);
      console.warn('-------------- PREFLIGHT CHECKS ----------------');
      console.warn('--- UTN AMOUNTS ---');
      console.log(UTNContracts.map(cnt => {
        return cnt.original.getAmount();
      }));
      console.warn('--- UTN STATES ---');
      UTNStatePromises = UTNContracts.map(cnt => {
        return cnt.checkOriginal(nodeApi);
      });
      console.log((await Promise.all(UTNStatePromises)).map(res => {
        return res.itemResult.state;
      }));
      console.warn('--- UTN OWNER ---');
      console.log(UTNContracts.map(cnt => {
        return cnt.original.isRoleAvailable('owner', [cryptoCloudAPI.privateKey.publicKey]);
      }));
      console.warn('--- UPACK STATE ---');
      console.log((await UPack.checkOriginal(nodeApi)).itemResult.state);
      console.warn('--- UPACK AMOUNT ---');
      console.log(UPack.getBalance());
      console.warn('--- UPACK OWNER ---');
      console.log(UPack.original.isRoleAvailable('owner', [cryptoCloudAPI.privateKey.publicKey]));
      console.warn('-------------- START SPLITJOIN ----------------');
      TP = Universa.splitContracts(UTNContracts, 215, cryptoCloudAPI.privateKey, cryptoCloudAPI.privateKey.publicKey, null);
      mainContract = TP.getMainContract();
      newContracts = TP.getNewContracts();
      parcel = Universa.Parcel.create(TP, UPack, 1, [cryptoCloudAPI.privateKey], false, false);
      console.warn("----- SAVE NEW UPack BINARY -----", enc64(UPack.pending.currentBinary));
      await parcel.register(nodeApi);
      //console.warn('Main TP contract', enc64(mainContract.original.currentBinary))
      //newContracts.forEach((cnt) => console.warn('New TP contract', enc64(cnt.original.currentBinary)))
      await new Promise((resolve, reject) => {
        return setTimeout(resolve, 3000);
      });
      return console.warn('Main TP contract state', (await mainContract.checkOriginal(nodeApi)).itemResult.state);
    });
    Unitest.addTest('split with contract amount equal to split amount', function () {
      var TP, contract1UTN, contract89UTN, ownerKeyPair, ownerPrivateKey, ownerPublicKey;
      contract89UTN = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHcHaar5oYYzw2TdHgbVjT6oAPoKO2i78TApH3imIU9G4zc2hhNTEyvEBYBmX2kx3uzOGDHDGmN0srCcbeKmW7dD7GkPsfY+MCfq2O0OLeOMGn9aUDcI+zf9GykG3cQEijCCyF1RymHtFHU2NyZWF0ZWRfYXR5I1VNXYU7cHViX2tlecQJAR4IHAEAAcQAAZLd9G+Ps847gjH0t0k6hMYFBxPQqmg5bfVqQ9Ow6+YjHZy6A396gja6f8XYAXivxR6peJ4ICOM13DIW2z+vTkhto+/NRhuY4VfoNYNG6hgoWaOFhKdsaguhQJebqueBZlXPODzFKbFknmXfn1f9vWpbRqEiKoTUd9BVKhZ33ZzOpdr7pN+fvjXKwwOOuGpc/XEcUXnQ5oGO0EMdzlPrv6LWSAVyAWsGFVlde8tZijEly9OdGbilZ2/X9CCgo3SDEM8Wl19LjLYaN7D0Vj7RNqsJNA7fgdjOthCyycuSnJnBc6EhWKvS3vbHIClAY1f+64J5xy7U6sfzCstprkzTdQUjc2lnbsQAATAjMxaMoeCrbqLvwFXTZUywB/crjt3Lv7UPniRP3UjtHqGo3dcGELUpnx4Ilpqfh1S/P9azvH72zMt21OZo5HKfIqulrE9kw+mJPQvlAKn/avwgl0YZl7ngIChnKP0l7gFEDm2DLp7kUka7k2ZUNvMkM6pvLOCcxkqd0qjym2KECMXi5vW0ARSb52O7T34i09XLrppZKRAA4d7AxWnw50QzVBmajsLZYRAm2FX+dVOjC3fa+AjIpaiOF4m+XTxyFGOGRVFOsucCldWGq59DCrwBhkiiSPbERaAK8esQqlqeNgCLdwJTwj5O0EdV54E3sgQ9K28/z+h0w9HwxmmH0NsjdHlwZVN1bmljYXBzdWxlI2RhdGHEaA0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgtE+1iS/kD+dLEBYc8fqPiL8gtpc8a2tr04Xh1mlYD7pB2OesxbkG2GuEksh+RiZJ5smiTbBZ2oc3j/Rynl1awV7q9Xeu/16zy1xsw1ld9iO03WZZJkGnt/6cippduaWuM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBiNkYXRhR6tjb250cmFjdF9vd25lcl9lbnRpdHm7GVVuaXZlcnNhIENvcnBvcmF0aW9uIEx0ZC5Tc2hvcnRfbmFtZRtVVE5rRVJDMjBfYWRkcmVzc7sqMHg5ZTMzMTk2MzZlMjEyNmUzYzBiYzllMzEzNEFFQzVlMTUwOEE0NmM3M3RpY2tlcr0yW2Rlc2NyaXB0aW9uuzw0LDk5Nyw4OTEsOTUyIFVUTiB3ZXJlIGNyZWF0ZWQgb24gSnVuZSAxM3RoIDIwMTggYXQgMTM6MTM6MTOVo1VUTiAtIFVuaXZlcnNhIFRva2VuZcMzBFVUTiBpcyBkaWdpdGFsaXNlZCBjb3Vwb24gYWxsb3dpbmcgeW91IHRvIHV0aWxpc2UgYW55IFVuaXZlcnNhLmlvIHRyYW5zYWN0aW9uIChpLmUuIHRvIHJlY2VpdmUgYW55CuKAnHNlcnZpY2Vz4oCdIGltcGxpZWQgYnkgdGhlIHBhcnRpY3VsYXIgdHJhbnNhY3Rpb24pIGF0IHRoZSBwcmljZSBhdCB0aGUgVXRpbGlzYXRpb24gRGF0ZS4KVGh1cywgZnJvbSBsZWdhbCBwcm9zcGVjdGl2ZSwgdGhlc2UgVG9rZW5zIGFyZSB5b3VyIHByb3ByaWV0YXJ5IHJpZ2h0cyB0byByZWNlaXZlIHBhcnRpY3VsYXIgdmFsdWVzCihVbml2ZXJzYS5pbyDigJxzZXJ2aWNlc+KAnSkuIFV0aWxpc2F0aW9uIOKAkyBVc2Ugb2YgVG9rZW4gZm9yIHBheWluZyB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbiByZW5kZXJlZCBieQpVbml2ZXJzYS5pbyBwbGF0Zm9ybS4gT3duZXJzaGlwIG9mIFRva2VucyBjYXJyaWVzIG5vIHJpZ2h0cywgZXhwcmVzcyBvciBpbXBsaWVkLCBvdGhlciB0aGFuIGl0IGlzIGRlZmluZWQKaW4gcHJldmlvdXMgc2VudGVuY2VzLiBJbiBwYXJ0aWN1bGFyLCB5b3UgdW5kZXJzdGFuZCBhbmQgYWNjZXB0IHRoYXQgVG9rZW5zIGRvIG5vdCByZXByZXNlbnQgb3IgY29uZmVyCmFueSBvd25lcnNoaXAgcmlnaHQgb3Igc3Rha2UsIHNoYXJlIG9yIHNlY3VyaXR5IG9yIGVxdWl2YWxlbnQgcmlnaHRzLCBvciBhbnkgcmlnaHQgdG8gcmVjZWl2ZSBmdXR1cmUKcmV2ZW51ZSBzaGFyZXMsIGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMgb3IgYW55IG90aGVyIGZvcm0gb2YgcGFydGljaXBhdGlvbiBpbiBvciByZWxhdGluZyB0byB0aGUKTmV0d29yayBhbmQvb3IgQ29tcGFueSBhbmQgaXRzIGNvcnBvcmF0ZSBhZmZpbGlhdGVzLCBvdGhlciB0aGFuIHJpZ2h0cyByZWxhdGluZyB0byB0aGUgcHJvdmlzaW9uIGFuZCByZWNlaXB0Cm9mIFNlcnZpY2VzIGluIHRoZSBVbml2ZXJzYSBOZXR3b3JrLiBUaGUgVG9rZW5zIGFyZSBub3QgaW50ZW5kZWQgdG8gYmUgYSBkaWdpdGFsIGN1cnJlbmN5LCBzZWN1cml0eSwKY29tbW9kaXR5IG9yIGFueSBvdGhlciBraW5kIG9mIGZpbmFuY2lhbCBpbnN0cnVtZW50LgpzY29udHJhY3Rfb3duZXK7IVVuaXZlcnNhLmlvIC0gVW5pdmVyc2EgQmxvY2tjaGFpblNjcmVhdGVkX2F0eR4yCVmFM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxMzkzNDowvSu9LL0tD70fqzg5LjAwMDAwMDAwMDAwMDAwMDAwML08eSNVTV2FU2NyZWF0ZWRfYnknlTtjcmVhdG9yvT+9LL1LDhdDdWFkZHJlc3O8JRD8AW3mqKOtr2zwW/90fkvtKE52S1Cwbai8IRGywoIVqtGqOR89U0tleUFkZHJlc3M9vUy9GCeVvRi9P70svUu9Vj29TENyZXZpc2lvbsBvNjNvcmlnaW4XLbxgNPo4dIkNdgYfGiNrdExoX003+lFT/d45OA6GifmcRoTzxSRSm5c5jDHBSTaAS+QleuN7ttX1rTvSQbHIIqkcK/zWjx/fCpP9ziwsgXbyyCtUhLqP9G4YZ+zEY/yL/GVEPUUzcGFyZW50JVNleHBpcmVzX2F0eR4gSiD7a3RyYW5zYWN0aW9uYWwFPYNVbml2ZXJzYUNvbnRyYWN0G25ldw4XLbxgUpm4vDfurvFY7iWN0WeNVz+nIv2zd8s/rRGsZ6XXCjEsHnIcYRGy/rLgUbeW8Fi4lKga3+jervXt6SQCqKoYDsIv44+O8UzMVx+Xy4oUjZeZb+9+GK4kVYN5Hj2qOThrPUU7dmVyc2lvbhg=");
      contract1UTN = dec64("J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHcHaar5oYYzw2TdHgbVjT6oAPoKO2i78TApH3imIU9G4zc2hhNTEyvEC/G2gY2qeDw5Bo97ECjQU9gw53pwYbzbUs9ju6VAEhFsNicxAb9OudLOVhB96r+efARrv0LvvQGsUFMQDQ4ThxU2NyZWF0ZWRfYXR5I1VNXYU7cHViX2tlecQJAR4IHAEAAcQAAZLd9G+Ps847gjH0t0k6hMYFBxPQqmg5bfVqQ9Ow6+YjHZy6A396gja6f8XYAXivxR6peJ4ICOM13DIW2z+vTkhto+/NRhuY4VfoNYNG6hgoWaOFhKdsaguhQJebqueBZlXPODzFKbFknmXfn1f9vWpbRqEiKoTUd9BVKhZ33ZzOpdr7pN+fvjXKwwOOuGpc/XEcUXnQ5oGO0EMdzlPrv6LWSAVyAWsGFVlde8tZijEly9OdGbilZ2/X9CCgo3SDEM8Wl19LjLYaN7D0Vj7RNqsJNA7fgdjOthCyycuSnJnBc6EhWKvS3vbHIClAY1f+64J5xy7U6sfzCstprkzTdQUjc2lnbsQAAVB3DtTp6wch9CU3X3e6HQtewh1j/mlkv1b5I56Nxa0oLMdU6FdlRBo0cPTiHrbq7ogmci0aEwXqdcHFwdxtL6jAIEYptlaMRDcfYRDDShOCY014JRDVctHGLxVXtxi/52rtjHP+NpvV2uOL/6yKTFlGwTTXALYxNv1VwPHl/6wbSCheUyaF2OmUZpLerJcze4h5dMfJ2ipXpPMFbnyHuaWtal2Z1SRpg9tZxpw12KwHaYZkqDYqKqxF2LGanAXifi0fvu499sGxIEfchyEEcVuySZOMopxWJiJNf/fv0q4xWcap1RLugLcmI3uqUBRGceBWfvgrEDY3ghhRrxnjbMcjdHlwZVN1bmljYXBzdWxlI2RhdGHEAg0fQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgtE+1iS/kD+dLEBYc8fqPiL8gtpc8a2tr04Xh1mlYD7pB2OesxbkG2GuEksh+RiZJ5smiTbBZ2oc3j/Rynl1awV7q9Xeu/16zy1xsw1ld9iO03WZZJkGnt/6cippduaWuM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbi9bcGVybWlzc2lvbnMfM3ZiNUt5QR8jbmFtZWNjaGFuZ2Vfb3duZXIjcm9sZR+VM0Bvd25lclt0YXJnZXRfbmFtZStvd25lcj1DUm9sZUxpbms9q0NoYW5nZU93bmVyUGVybWlzc2lvbjNhMkRMUDM/lVNzcGxpdF9qb2lupa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlozAuMDAwMDAwMDAwMDAwMDAwMDAxQ21pbl91bml0vSGLam9pbl9tYXRjaF9maWVsZHMOY3N0YXRlLm9yaWdpbj2bU3BsaXRKb2luUGVybWlzc2lvbjN3M0Mwc2YflTNyZXZva2WlrT2DUmV2b2tlUGVybWlzc2lvblNyZWZlcmVuY2VzBlNjcmVhdGVkX2F0eR4yCVmFI2RhdGFHq2NvbnRyYWN0X293bmVyX2VudGl0ebsZVW5pdmVyc2EgQ29ycG9yYXRpb24gTHRkLmtFUkMyMF9hZGRyZXNzuyoweDllMzMxOTYzNmUyMTI2ZTNjMGJjOWUzMTM0QUVDNWUxNTA4QTQ2YzdTc2hvcnRfbmFtZRtVVE4zdGlja2VyvTVbZGVzY3JpcHRpb267PDQsOTk3LDg5MSw5NTIgVVROIHdlcmUgY3JlYXRlZCBvbiBKdW5lIDEzdGggMjAxOCBhdCAxMzoxMzoxM5WjVVROIC0gVW5pdmVyc2EgVG9rZW5lwzMEVVROIGlzIGRpZ2l0YWxpc2VkIGNvdXBvbiBhbGxvd2luZyB5b3UgdG8gdXRpbGlzZSBhbnkgVW5pdmVyc2EuaW8gdHJhbnNhY3Rpb24gKGkuZS4gdG8gcmVjZWl2ZSBhbnkK4oCcc2VydmljZXPigJ0gaW1wbGllZCBieSB0aGUgcGFydGljdWxhciB0cmFuc2FjdGlvbikgYXQgdGhlIHByaWNlIGF0IHRoZSBVdGlsaXNhdGlvbiBEYXRlLgpUaHVzLCBmcm9tIGxlZ2FsIHByb3NwZWN0aXZlLCB0aGVzZSBUb2tlbnMgYXJlIHlvdXIgcHJvcHJpZXRhcnkgcmlnaHRzIHRvIHJlY2VpdmUgcGFydGljdWxhciB2YWx1ZXMKKFVuaXZlcnNhLmlvIOKAnHNlcnZpY2Vz4oCdKS4gVXRpbGlzYXRpb24g4oCTIFVzZSBvZiBUb2tlbiBmb3IgcGF5aW5nIHRoZSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIHJlbmRlcmVkIGJ5ClVuaXZlcnNhLmlvIHBsYXRmb3JtLiBPd25lcnNoaXAgb2YgVG9rZW5zIGNhcnJpZXMgbm8gcmlnaHRzLCBleHByZXNzIG9yIGltcGxpZWQsIG90aGVyIHRoYW4gaXQgaXMgZGVmaW5lZAppbiBwcmV2aW91cyBzZW50ZW5jZXMuIEluIHBhcnRpY3VsYXIsIHlvdSB1bmRlcnN0YW5kIGFuZCBhY2NlcHQgdGhhdCBUb2tlbnMgZG8gbm90IHJlcHJlc2VudCBvciBjb25mZXIKYW55IG93bmVyc2hpcCByaWdodCBvciBzdGFrZSwgc2hhcmUgb3Igc2VjdXJpdHkgb3IgZXF1aXZhbGVudCByaWdodHMsIG9yIGFueSByaWdodCB0byByZWNlaXZlIGZ1dHVyZQpyZXZlbnVlIHNoYXJlcywgaW50ZWxsZWN0dWFsIHByb3BlcnR5IHJpZ2h0cyBvciBhbnkgb3RoZXIgZm9ybSBvZiBwYXJ0aWNpcGF0aW9uIGluIG9yIHJlbGF0aW5nIHRvIHRoZQpOZXR3b3JrIGFuZC9vciBDb21wYW55IGFuZCBpdHMgY29ycG9yYXRlIGFmZmlsaWF0ZXMsIG90aGVyIHRoYW4gcmlnaHRzIHJlbGF0aW5nIHRvIHRoZSBwcm92aXNpb24gYW5kIHJlY2VpcHQKb2YgU2VydmljZXMgaW4gdGhlIFVuaXZlcnNhIE5ldHdvcmsuIFRoZSBUb2tlbnMgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBhIGRpZ2l0YWwgY3VycmVuY3ksIHNlY3VyaXR5LApjb21tb2RpdHkgb3IgYW55IG90aGVyIGtpbmQgb2YgZmluYW5jaWFsIGluc3RydW1lbnQuCnNjb250cmFjdF9vd25lcrshVW5pdmVyc2EuaW8gLSBVbml2ZXJzYSBCbG9ja2NoYWluM2lzc3VlcieVvT0ja2V5cxYXG2tleRczcGFja2VkxAkCHggcAQABxAACpE0Xe0u3lfQF5w0cz2JzEC7swQgSdW/KxOt9nODjjwS4WmjGJOOiFjbpTEQOrK8etsx8z+hyzG+5aeFb5xoROj1BCHpjGvIcjpd/QG2bpbVY+NwWE3uA8TLE74gq+78P8g5wa6Hw/TlVrm/KiP4+eFZ4GHiO/19BoPVDCUwb1YRTk0L4ots5oMGdNmVmnXBplHgc5bd2tfckN+3L+9as5no0CKgsZuAn1F7sPYheKhYfv6l/luwD6M+p8m9Pptkgkr+OfuWVEx4+CLLd24n/WAB6U4wuMB1wcsTrznSPD8TV3zD0lSy+SJy1UqNAXeEubEVU4Rbk/zZPBdRVf00O99IKbF2/KnVUZWs4T/IOJj4dhWQZ7ZtVw22TeS8dmXCAuJ4mASxwhbXXwEfRoOzRNOwHbMG9Pxaoi2aKWDbuxIynGt3xPTM8K7ajfgvd4AwSv+DGcHN03H1h7/c4isWrVfx+qQRfr1H5O65ky22Wd72RO38JJwz8Sda/ZpxMqwTcgaphxv7ldPvg0cDPHn80BrnUoG5jM7NAXOyn5s8UjJ3+qLeKzmya4bMnIOHUn07GFTRqh9Abzsov0CasoEiSJHUTGSRIpYLXSVKYWJrRpeiWq4G01cEMrolcuibaJpNhmdXXM0uKHCM7xWojkNNcQP0ilDasbWNCMuSgarAFIq89Y1JTQVB1YmxpY0tleT1LS2V5UmVjb3JkF71CF71ExAkCHggcAQABxAACpe/B5kLyE3k1wZQ0rBq8Zhq3veEUozEztOYt4r4HtxoOAAl0TcwF5uPSLHxxcFChKiG8VOwsxv2dUzayiVTB2YDtGU+pViciswylUfXVV20NP2ldVHrHlSHcYISZJksEHc+XOUPMgdy3sX71lxIym3Czz7na2eTbffPz2rfeJzlF+Y0+9XrzA2bQQjEeCa3Hrwh3N0xDCAKhuVdwNKcS3RerJq3m12FsRS82Je/13rf41v3Fa1G2vo8IzihjPBKZLB97dwRz3D81eqpGS1AvxVo4jaAdIYAYR1gz7fZ9/w72hWpEvudOVsyt1c/xobGOlt0KUWLOj8LH+wzq+cWs57Tu5lJ+Bi8RPxMfUfIGejLpuwSRW4+1empa6ZThF0iSMz9VzpCjgvFSJKeHFdiy7shHJzAFXXPjVWtEj1WoFrmOyeXpTR9QKRqLjSCUtZmNd78GAKFn+EvvFcA7BvBgLPJkf6Fw9oIgf4YfICtLFf1pgg8PlOpMKEmjqLmD5Ork05N9OzmQQxlm+EZMX4pvylr8GXmhts71DJizMq0DnTilKV7r8fFdv01Uz9BaLnMxUg0GmVVlHi3SKoeKjrArqvPwR2dyYwG5yzW1+N1duYygqGAE3LqiS/yarOKzUfF7s7mWARyvcx4mbqgLuaCHKokBWvRFwXiIIKCV5Cn25i09vUY9vUdLYWRkcmVzc2VzvSw9U1NpbXBsZVJvbGUrc3RhdGVXS2JyYW5jaF9pZDsxMzkzNDoxvSu9LFNjcmVhdGVkX2J5J5U7Y3JlYXRvcr0/vSy9Sw4XQ3VhZGRyZXNzvCUQ/AFt5qijra9s8Fv/dH5L7ShOdktQsG2ovCERssKCFarRqjkfPVNLZXlBZGRyZXNzPb1MvS15I1VNXYW9Lg+9H6MxLjAwMDAwMDAwMDAwMDAwMDAwML0YJ5W9GL0/vSy9S71UPb1MQ3JldmlzaW9uwG82M29yaWdpbhctvGA0+jh0iQ12Bh8aI2t0TGhfTTf6UVP93jk4DoaJ+ZxGhPPFJFKblzmMMcFJNoBL5CV643u21fWtO9JBscgiqRwr/NaPH98Kk/3OLCyBdvLIK1SEuo/0bhhn7MRj/Iv8ZUQ9RVNleHBpcmVzX2F0eR4gSiD7M3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=");
      contract1UTN = Universa.Contract.fromBOSS(contract1UTN);
      contract89UTN = Universa.Contract.fromBOSS(contract89UTN);
      this.assertEquals(contract89UTN.original.getAmount(), 89);
      this.assertEquals(contract1UTN.original.getAmount(), 1);
      ownerKeyPair = dec64("PyNuYW1lS3RvYmVvcm5vdDtrZXlUeXBlU1ByaXZhdGVLZXkba2V5xAoBJgAcAQABvIDIpocdgylrVK76oHPskgEC6dq8vTGpJ6gap9pBQe8I3jsga+UG32JdDi8kRqnXzXY8n9lR3EfU4RPi0qoI0jIELPZ0xFpGF5/RYY48eGVnutqB9frcxbwhCk4DFQKUsuplD1vMXUBXmuKb+fst39+RZWeHqm5U3NdYwZ7zGY50c7yAu2FcrXdw8um+z1ZL9urJOxZvVQQzle/wi+U6pRwzYODBeDBYAIqep+O8SCn+msbeSJfmovzQb9YhsA54vh3xV4hE71eT8vT5OqdKLN7Y+ijPLmBtX8Xa15fiiiRgfRUQZIZAbCXB20+P+6hNWCnGoW490oVzwZV+sRYEEcEDCqcjc2l6ZcAACEtjcmVhdGVkQXR5fFBIXYU7Y2xvdWRJZAUzX190eXBlI1BhaXI=");
      ownerPrivateKey = Universa.Pair.fromBOSS(ownerKeyPair).privateKey;
      ownerPublicKey = Universa.Pair.fromBOSS(ownerKeyPair).publicKey;
      TP = Universa.splitContracts([contract89UTN, contract1UTN], 1, ownerPrivateKey, ownerPublicKey, null);
      this.assertEquals(TP.getNewContracts().length, 0);
      return this.assertEquals(Universa.utils.encode64(contract1UTN.original.currentBinary), Universa.utils.encode64(TP.getMainContract().original.currentBinary));
    });
    Unitest.addTest('send from A to B and back same token', async function () {
      var A_NodeApi, A_PrivateKey, A_PublicKey, A_TO_B_SPLIT_parcel, A_TO_B_tpack, A_UPack, A_UPack_State, A_cashback, A_cashbackState, A_transfer, A_transferState, B_NodeApi, B_PrivateKey, B_PublicKey, B_TO_A_SPLIT_parcel, B_TO_A_tpack, B_UPack, B_UPack_State, B_cashback, B_cashbackState, B_transfer, B_transferState, ref, ref1, ref2, ref3, registerResponse, tokenContract, tokenContractState;
      // A - texas/adminadmin
      // B - romanec/adminadmin

      // Define keys and upacks
      A_PrivateKey = Universa.Pair.fromBOSS(A_PAIR).privateKey;
      A_PublicKey = Universa.Pair.fromBOSS(A_PAIR).publicKey;
      A_UPack = Contract.fromBOSS(A_UPACK);
      A_NodeApi = await Node.connect(A_PrivateKey);
      B_PrivateKey = Universa.Pair.fromBOSS(B_PAIR).privateKey;
      B_PublicKey = Universa.Pair.fromBOSS(B_PAIR).publicKey;
      B_UPack = Contract.fromBOSS(B_UPACK);
      B_NodeApi = await Node.connect(B_PrivateKey);
      B_PrivateKey = Universa.PrivateKey.fromBOSS(B1_PRIVATE);
      B_PublicKey = B_PrivateKey.publicKey;
      B_UPack = Contract.fromBOSS(B1_UPACK);
      // ----------------- CREATE TOKEN CONTRACT ----------------- #

      // Create token contract under A key
      tokenContract = Universa.MintableContract.create(A_PublicKey, '100000', 1, 'BRB', 'BRB', 'BRB', false);
      // Register A token contract in the network
      await tokenContract.createParcel(A_UPack, 1, [A_PrivateKey], false, false).register(A_NodeApi);
      console.warn("----- SAVE NEW A_UPack BINARY (1) -----", enc64(A_UPack.pending.currentBinary));
      // Check upack state after network registration
      A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      while ((ref = A_UPack_State.itemResult.state) !== 'DECLINED' && ref !== 'APPROVED') {
        A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      }
      if (A_UPack_State.itemResult.state === 'DECLINED') {
        console.warn("A_UPack declined with: ", A_UPack_State.itemResult.errors);
      }
      // Check token contract state after network registration
      tokenContractState = await tokenContract.checkPending(A_NodeApi);
      console.warn(`Token state is ${tokenContractState.itemResult.state}`);
      if (tokenContractState.itemResult.state === 'DECLINED') {
        console.warn("Token declined with: ", tokenContractState.itemResult.errors);
      }
      this.assertEquals(tokenContractState.itemResult.state, 'APPROVED');
      // Update upack and token origin
      tokenContract.updateOriginal();
      A_UPack.updateOriginal();
      // ----------------- SEND TOKENS FROM A TO B ----------------- #
      // Send 100 tokens from A to B
      A_TO_B_tpack = Universa.splitContracts([tokenContract], 100, A_PrivateKey, B_PublicKey, 'send from A to B');
      A_TO_B_SPLIT_parcel = Universa.Parcel.create(A_TO_B_tpack, A_UPack, 1, [A_PrivateKey], false, false);
      console.warn("----- SAVE NEW A_UPack BINARY (2) -----", enc64(A_UPack.pending.currentBinary));
      registerResponse = await A_TO_B_SPLIT_parcel.register(A_NodeApi);
      A_cashback = A_TO_B_tpack.getMainContract();
      B_transfer = A_TO_B_tpack.getNewContracts()[0];
      // Check upack state after network registration
      A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      while ((ref1 = A_UPack_State.itemResult.state) !== 'DECLINED' && ref1 !== 'APPROVED') {
        A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      }
      if (A_UPack_State.itemResult.state === 'DECLINED') {
        console.warn("A_UPack declined with: ", A_UPack_State.itemResult.errors);
      }
      A_cashbackState = await A_cashback.checkOriginal(A_NodeApi);
      B_transferState = await B_transfer.checkOriginal(B_NodeApi);
      console.warn(`A_cashback state is ${A_cashbackState.itemResult.state}`);
      console.warn(`B_transfer state is ${B_transferState.itemResult.state}`);
      this.assertEquals(B_transferState.itemResult.state, 'APPROVED');
      this.assertEquals(A_cashbackState.itemResult.state, 'APPROVED');
      A_UPack.updateOriginal();
      // ----------------- SEND TOKENS FROM B TO A ----------------- #

      // Send 100 tokens from A to B
      B_TO_A_tpack = Universa.splitContracts([B_transfer], 10, B_PrivateKey, A_PublicKey, 'send from B to A');
      console.log("<><><>", B_TO_A_tpack);
      B_TO_A_SPLIT_parcel = Universa.Parcel.create(B_TO_A_tpack, B_UPack, 1, [B_PrivateKey], false, false);
      console.warn("----- SAVE NEW B_UPack BINARY (1) -----", enc64(B_UPack.pending.currentBinary));
      registerResponse = await B_TO_A_SPLIT_parcel.register(B_NodeApi);
      B_cashback = B_TO_A_tpack.getMainContract();
      A_transfer = B_TO_A_tpack.getNewContracts()[0];
      // Check upack state after network registration
      B_UPack_State = await B_UPack.checkPending(B_NodeApi);
      while ((ref2 = B_UPack_State.itemResult.state) !== 'DECLINED' && ref2 !== 'APPROVED') {
        B_UPack_State = await B_UPack.checkPending(B_NodeApi);
        console.log(B_UPack_State);
      }
      if (B_UPack_State.itemResult.state === 'DECLINED') {
        console.warn("B_UPack declined with: ", B_UPack_State.itemResult.errors);
      }
      B_cashbackState = await B_cashback.checkOriginal(B_NodeApi);
      A_transferState = await A_transfer.checkOriginal(A_NodeApi);
      console.log(B_cashbackState, A_transferState);
      console.warn(`B_cashback state is ${B_cashbackState.itemResult.state}`);
      console.warn(`A_transfer state is ${A_transferState.itemResult.state}`);
      this.assertEquals(A_transferState.itemResult.state, 'APPROVED');
      this.assertEquals(B_cashbackState.itemResult.state, 'APPROVED');
      // ----------------- SEND TOKENS FROM A TO B ----------------- #
      // Send 100 tokens from A to B
      A_TO_B_tpack = Universa.splitContracts([A_cashback, A_transfer], 1000, A_PrivateKey, B_PublicKey, 'send from A to B');
      console.log(A_TO_B_tpack);
      A_TO_B_SPLIT_parcel = Universa.Parcel.create(A_TO_B_tpack, A_UPack, 1, [A_PrivateKey], false, false);
      console.warn("----- SAVE NEW A_UPack BINARY (3) -----", enc64(A_UPack.pending.currentBinary));
      registerResponse = await A_TO_B_SPLIT_parcel.register(A_NodeApi);
      A_cashback = A_TO_B_tpack.getMainContract();
      B_transfer = A_TO_B_tpack.getNewContracts()[0];
      // Check upack state after network registration
      A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      while ((ref3 = A_UPack_State.itemResult.state) !== 'DECLINED' && ref3 !== 'APPROVED') {
        A_UPack_State = await A_UPack.checkPending(A_NodeApi);
      }
      if (A_UPack_State.itemResult.state === 'DECLINED') {
        console.warn("A_UPack declined with: ", A_UPack_State.itemResult.errors);
      }
      A_cashbackState = await A_cashback.checkOriginal(A_NodeApi);
      B_transferState = await B_transfer.checkOriginal(B_NodeApi);
      console.log(A_cashbackState, B_transferState);
      console.warn(`A_cashback state is ${A_cashbackState.itemResult.state}`);
      console.warn(`B_transfer state is ${B_transferState.itemResult.state}`);
      this.assertEquals(B_transferState.itemResult.state, 'APPROVED');
      this.assertEquals(A_cashbackState.itemResult.state, 'APPROVED');
      return A_UPack.updateOriginal();
    });
    Unitest.addTest('check basic split', async function () {
      var cashback, cashbackState, contractState, myRootToken, newOwnerPublicKey, nodeApi, parcel, paymentState, ref, ref1, registerResponse, rootTokenState, tokenOwnerPrivateKey, tokenOwnerPublicKey, tpack, transfer, transferState, upack, upackOwnerPrivateKey;
      console.log("Check basic split");
      tokenOwnerPrivateKey = Universa.PrivateKey.fromBOSS(T_KEY3);
      tokenOwnerPublicKey = tokenOwnerPrivateKey.publicKey;
      newOwnerPublicKey = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1).publicKey;
      nodeApi = await Node.connect(tokenOwnerPrivateKey);
      upackOwnerPrivateKey = Universa.PrivateKey.fromBOSS(U_KEY3);
      upack = Contract.fromBOSS(U_BIN3);
      myRootToken = Contract.createToken(tokenOwnerPublicKey, '100', 0.1, "My test token", "MTK", "");
      paymentState = await upack.checkOriginal(nodeApi);
      contractState = await myRootToken.checkOriginal(nodeApi);
      console.log("create root token contract..");
      console.log(`U package is ${paymentState.itemResult.state}, root token is ${contractState.itemResult.state}`);
      parcel = myRootToken.createParcel(upack, 1, [upackOwnerPrivateKey, tokenOwnerPrivateKey]);
      console.log("----- SAVE NEW PAYMENT BINARY (1) -----", enc64(upack.pending.currentBinary));
      registerResponse = await parcel.register(nodeApi);
      paymentState = await upack.checkPending(nodeApi);
      while ((ref = paymentState.itemResult.state) !== 'DECLINED' && ref !== 'APPROVED') {
        paymentState = await upack.checkPending(nodeApi);
      }
      if (paymentState.itemResult.state === 'DECLINED') {
        console.log("payment declined with: ", paymentState.itemResult.errors);
      }
      rootTokenState = await myRootToken.checkPending(nodeApi);
      console.log(`root token state is ${rootTokenState.itemResult.state}`);
      if (rootTokenState.itemResult.state === 'DECLINED') {
        console.log("root token declined with: ", rootTokenState.itemResult.errors);
      }
      this.assertEquals(rootTokenState.itemResult.state, 'APPROVED');
      myRootToken.updateOriginal();
      upack.updateOriginal();
      // next operation
      tpack = Universa.splitContracts([myRootToken], 40, tokenOwnerPrivateKey, newOwnerPublicKey, 'some description');
      tpack = Universa.utils.encode64(tpack.toBOSS());
      tpack = Universa.TransactionPack.fromBOSS(Universa.utils.decode64(tpack));
      parcel = Universa.Parcel.create(tpack, upack, 1, [upackOwnerPrivateKey], false, false);
      console.log("----- SAVE NEW PAYMENT BINARY (2) -----", enc64(upack.pending.currentBinary));
      registerResponse = await parcel.register(nodeApi);
      cashback = tpack.getMainContract();
      transfer = tpack.getNewContracts()[0];
      console.log("cashback", cashback);
      console.log("transfer", transfer);
      paymentState = await upack.checkPending(nodeApi);
      while ((ref1 = paymentState.itemResult.state) !== 'DECLINED' && ref1 !== 'APPROVED') {
        paymentState = await upack.checkPending(nodeApi);
      }
      if (paymentState.itemResult.state === 'DECLINED') {
        console.log("payment declined with: ", paymentState.itemResult.errors);
      }
      cashbackState = await cashback.checkOriginal(nodeApi);
      transferState = await transfer.checkOriginal(nodeApi);
      console.log(`cashback state is ${cashbackState.itemResult.state}`);
      console.log(`transfer state is ${transferState.itemResult.state}`);
      return this.assertEquals(transferState.itemResult.state, 'APPROVED');
    });
    Unitest.addTest('check basic split contract owner', async function () {
      var TP, chatleApi, contact, contactContract, newOwnerPublicKey, tokenContract, tokenOwnerPrivateKey;
      chatleApi = await CryptoCloud.connectWithPassword('ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==', 'texas', 'adminadmin');
      tokenOwnerPrivateKey = Universa.PrivateKey.fromBOSS(T_KEY3);
      tokenContract = Universa.Contract.fromBOSS(TOKEN_CONTRACT);
      console.log(tokenContract.contractName, tokenContract.toJsObject().contractName);
      contact = await chatleApi.getParty({
        partyId: 19266
      });
      newOwnerPublicKey = contact.publicKey;
      TP = Universa.splitContracts([tokenContract], 1, tokenOwnerPrivateKey, newOwnerPublicKey, 'Desc');
      contactContract = TP.getNewContracts()[0];
      this.assertTrue(contactContract.temp.isRoleAvailable('owner', [newOwnerPublicKey]));
      return console.log(contactContract.contractName, contactContract.toJsObject().contractName);
    });
    Unitest.addTest('check basic split with party', async function () {
      var cashback, cashbackState, chatleApi, contact, myRootToken, newOwnerPublicKey, nodeApi, parcel, paymentState, ref, registerResponse, tokenOwnerPrivateKey, tokenOwnerPublicKey, tpack, transfer, transferState, upack, upackOwnerPrivateKey;
      console.log("Check basic split with party");
      chatleApi = await CryptoCloud.connectWithPassword('ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==', 'texas', 'adminadmin');
      tokenOwnerPrivateKey = Universa.PrivateKey.fromBOSS(T_KEY3);
      tokenOwnerPublicKey = tokenOwnerPrivateKey.publicKey;
      contact = await chatleApi.getParty({
        partyId: 19266
      });
      newOwnerPublicKey = contact.publicKey;
      nodeApi = await Node.connect(tokenOwnerPrivateKey);
      upackOwnerPrivateKey = Universa.PrivateKey.fromBOSS(U_KEY3);
      upack = Contract.fromBOSS(U_BIN3);
      myRootToken = Universa.Contract.fromBOSS(TOKEN_CONTRACT);
      // next operation
      tpack = Universa.splitContracts([myRootToken], 40, tokenOwnerPrivateKey, newOwnerPublicKey, 'some description');
      tpack = Universa.utils.encode64(tpack.toBOSS());
      tpack = Universa.TransactionPack.fromBOSS(Universa.utils.decode64(tpack));
      parcel = Universa.Parcel.create(tpack, upack, 1, [upackOwnerPrivateKey], false, false);
      console.log("----- SAVE NEW PAYMENT BINARY (2) -----", enc64(upack.pending.currentBinary));
      registerResponse = await parcel.register(nodeApi);
      cashback = tpack.getMainContract();
      transfer = tpack.getNewContracts()[0];
      console.log("cashback", cashback);
      console.log("transfer", transfer);
      paymentState = await upack.checkPending(nodeApi);
      while ((ref = paymentState.itemResult.state) !== 'DECLINED' && ref !== 'APPROVED') {
        paymentState = await upack.checkPending(nodeApi);
      }
      if (paymentState.itemResult.state === 'DECLINED') {
        console.log("payment declined with: ", paymentState.itemResult.errors);
      }
      cashbackState = await cashback.checkOriginal(nodeApi);
      transferState = await transfer.checkOriginal(nodeApi);
      console.log(`cashback state is ${cashbackState.itemResult.state}`);
      console.log(`transfer state is ${transferState.itemResult.state}`);
      return this.assertEquals(transferState.itemResult.state, 'APPROVED');
    });
    return Unitest.addTest('check basic joinContracts', async function () {
      var contract1, contract2, contract3, newContract, nodeApi, parcel, privKey, pubKey, response, tpack, upack, upackPrivateKey;
      contract1 = Contract.fromBOSS(CONTRACT_BIN);
      contract2 = Contract.fromBOSS(U_CONTRACT_BIN);
      privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY);
      pubKey = privKey.publicKey;
      contract3 = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "", false);
      console.log(contract3);
      this.assertThrows(Universa.NoPermissionFound, function () {
        return Universa.joinContracts([contract2, contract3], false);
      });
      this.assertThrows(Universa.NoContractError, function () {
        return Universa.joinContracts([], false);
      });
      tpack = Universa.joinContracts([contract3], false);
      console.log(tpack);
      response = await XChange.getTransactionCost(tpack);
      console.log(response);
      upackPrivateKey = Universa.PrivateKey.fromBOSS(U_KEY);
      upack = Contract.fromBOSS(U_CONTRACT_BIN);
      parcel = Universa.Parcel.create(tpack, upack, response.cost, [upackPrivateKey], true, false);
      nodeApi = await Node.connect(privKey);
      response = await parcel.register(nodeApi);
      console.log(response);
      this.assertTrue(response.result);
      newContract = Universa.Contract.fromBOSS(tpack.contract);
      console.log("new contract amount:");
      return this.assertEquals(newContract.temp.getAmount(), 100);
    });
  });

  //Unitest.addTest 'check basic splitContracts', ->
  //  privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
  //  pubKey = privKey.publicKey
  //  contract1 = Contract.fromBOSS(CONTRACT_BIN)
  //  contract2 = Contract.fromBOSS(U_CONTRACT_BIN)
  //  contract100 = Contract.create(pubKey, '100', 0.1, "My test token", "MTK", "GENERAL_CONTRACT")
  //  contract0 = Contract.create(pubKey, '0', 0.1, "My test token", "MTK", "GENERAL_CONTRACT")

  //  @assertThrows Universa.NoContractError, ->
  //      Universa.splitContracts([], 50, pubKey, 'some description')
  //  @assertThrows Universa.NoPermissionFound, ->
  //      Universa.splitContracts([contract2, contract100], 50, pubKey, 'some description')
  //  @assertThrows Universa.BalanceError, ->
  //      Universa.splitContracts([contract100], 0, pubKey, 'some description')
  //  @assertThrows Universa.BalanceError, ->
  //      Universa.splitContracts([contract100], -5, pubKey, 'some description')
  //  @assertThrows Universa.WalletIDError, ->
  //      Universa.splitContracts([contract0, contract100], 50, pubKey, 'some description')
  //  @assertThrows Universa.BalanceError, ->
  //      Universa.splitContracts([contract100], 150, pubKey, 'some description')

  //  tpack = Universa.splitContracts([contract100], 50, pubKey, 'some description')
  //  console.log(tpack)

  //Unitest.addTest 'check more splitContracts', ->
  //  privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
  //  pubKey = privKey.publicKey
  //  contract100 = Contract.create(pubKey, '100', 0.1, "My test token", "MTK", "GENERAL_CONTRACT")
  //  contract100.createRevision()
  //  temp1 = contract100.temp
  //  temp1.lockData()
  //  temp1.lock()
  //#  jso = contract100.toJsObject()
  //  contract40_1 = Contract.fromJsObject(jso)
  //  contract40_1.temp.setState("data.amount", "40")

  //  tpack = Universa.splitContracts([contract100, contract40_1], 130, pubKey, 'some description')
  //  console.log(tpack)

  //  tpack = Universa.splitContracts([contract100, contract40_1], 39, pubKey, 'some description')

  //Unitest.addTest 'register more splitContracts', ->
  //  privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
  //  pubKey = privKey.publicKey
  //  contract100 = Contract.create(pubKey, '300', 0.1, "My test token", "MTK", "GENERAL_CONTRACT")
  //  contract100.createRevision()
  //  temp1 = contract100.temp
  //  temp1.lockData()
  //  temp1.lock()
  //  jso = contract100.toJsObject()
  //  contract40_1 = Contract.fromJsObject(jso)
  //  contract40_1.temp.setState("data.amount", "5")
  //  contract40_2 = Contract.fromJsObject(jso)
  //  contract40_2.temp.setState("data.amount", "10")
  //  contract40_3 = Contract.fromJsObject(jso)
  //  contract40_3.temp.setState("data.amount", "15")
  //  contract40_4 = Contract.fromJsObject(jso)
  //  contract40_4.temp.setState("data.amount", "20")
  //  contract40_5 = Contract.fromJsObject(jso)
  //  contract40_5.temp.setState("data.amount", "25")
  //  contract40_6 = Contract.fromJsObject(jso)
  //  contract40_6.temp.setState("data.amount", "30")
  //  contract40_7 = Contract.fromJsObject(jso)
  //  contract40_7.temp.setState("data.amount", "35")
  //  contract40_8 = Contract.fromJsObject(jso)
  //  contract40_8.temp.setState("data.amount", "40")
  //  contract40_9 = Contract.fromJsObject(jso)
  //  contract40_9.temp.setState("data.amount", "50")

  //internal sum must be 75
  //  tpack = Universa.splitContracts([contract40_9, contract40_8, contract40_7, contract40_6, contract40_5, contract40_4, contract40_3, contract40_2, contract40_1], 60, pubKey, 'some description')

  //internal sum must be 175
  //  tpack = Universa.splitContracts([contract40_9, contract40_8, contract40_7, contract40_6, contract40_5, contract40_4, contract40_3, contract40_2, contract40_1], 170, pubKey, 'some description')

  //internal sum must be 215
  //  tpack = Universa.splitContracts([contract40_9, contract40_8, contract40_7, contract40_6, contract40_5, contract40_4, contract40_3, contract40_2, contract40_1], 180, pubKey, 'some description')

  //internal sum must be 225 -> 8 contracts
  //  tpack = Universa.splitContracts([contract40_9, contract40_8, contract40_7, contract40_6, contract40_5, contract40_4, contract40_3, contract40_2, contract40_1], 220, pubKey, 'some description')

  //  response = await XChange.getTransactionCost(tpack)
  //  console.log(response)

  //  upackPrivateKey = Universa.PrivateKey.fromBOSS(U_KEY)
  //  upack = Contract.fromBOSS(U_CONTRACT_BIN)
  //  parcel = Universa.Parcel.create(tpack, upack, response.cost, [upackPrivateKey], true)
  //  nodeApi = await Node.connect(privKey)
  //  response = await parcel.register(nodeApi)
  //  console.log(response)
  //  @assertTrue response.result
}).call(this);