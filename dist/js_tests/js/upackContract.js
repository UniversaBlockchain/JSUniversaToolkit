// Generated by CoffeeScript 2.3.1
(function () {
  var Contract, dec64, enc64, test;

  test = window.unitjs || {};

  dec64 = Universa.utils.v2.decode64;

  enc64 = Universa.utils.v2.encode64;

  Contract = Universa.Contract;

  Unitest.addTestModule(function () {
    var CONTRACT_BIN, CONTRACT_KEY, SOME_PRIVATE_KEY_2, U_CONTRACT_BIN, U_KEY;
    CONTRACT_KEY = dec64("JgAcAQABvIEAxAgalqIUgnCbe3Cc34xSBkjIl7bbE6TZSDj+rmgM8yjP7UbpLbB85aY2ZxH0OItYwZQH/cawVJGAkTcxTH1A5A7l6P/4o97yP4Qkb7XYpDlwXhvWlHTpvODrI8eT5KIBW+JFHSmHk3NSCQg6XoA7X0+t0vZXr3aMvP4ACw2R8gW8gQC93hQfbkJaNMAJZ+wQMQIVr6Amy1Me4H6v83wDv4gH7TfgGJlJj5MY3HwHtXO5Ac0vcPxVlRgX0VUe5jM1kfB3Q+nV5md4O/oZZMs0NKxusShPckEE5tQnHqt3UNcMw8LL7UVWfCFbmB535hD8RbxODYdnz+R2JDHUEYL8ZlmLRQ==");
    CONTRACT_BIN = dec64("");
    U_CONTRACT_BIN = dec64("JyNkYXRhxC0GHxtuZXcGQ3Jldm9raW5nDhczX190eXBlM0hhc2hJZFNjb21wb3NpdGUzvGD9tVYDOBLZXut+OXcpO20+EySr2wFDwjOncTtTUVdT/tTcsKqNybVcMf3YX5uMx7iqw0ZmV6ZfGBMv+zgQtB2qCY4hJlm0ICpHwR/CbXQ6iljYY1ZHRNS61SdUlgeLsQpDY29udHJhY3QvS2FwaV9sZXZlbBg9g1VuaXZlcnNhQ29udHJhY3RTZGVmaW5pdGlvbjcjZGF0YRdTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0jbmFtZbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU3JlZmVyZW5jZXMdW3Blcm1pc3Npb25zJzNKdG9qUHg3raNkZWNyZW1lbnRfcGVybWlzc2lvbkttaW5fdmFsdWUAI3JvbGUfW3RhcmdldF9uYW1lK293bmVyPUNSb2xlTGlua60zb3duZXIyQ21heF9zdGVwClNmaWVsZF9uYW1ls3Rlc3RfdHJhbnNhY3Rpb25fdW5pdHM9u0Bjb20uaWNvZGljaS51bml2ZXJzYS5jb250cmFjdC5wZXJtaXNzaW9ucy5DaGFuZ2VOdW1iZXJQZXJtaXNzaW9uM3BXNDUzcTetvRy9HQC9Hr0fvSQKvSWLdHJhbnNhY3Rpb25fdW5pdHM9vSczbGFVbGFrH70eL0thZGRyZXNzZXMdI2tleXMOFxtrZXkXPWNSU0FQdWJsaWNLZXkzcGFja2VkxAkBHggcAQABxAABxSSWfXW20wGsRn9khVZDtvcCtUqP/scN3oVPU3r0152Fu62pfx9Mjc1cmQnRYSkeZzWA50RYQTU3FlXC5iIN7w+Lm6TGPQxWe+uYGMgKLCbAmyMXPWupvzeB5SEMtylQ5ml12iwFQkamqOiFE2KWMYz/UGhW87/ELPckmpoanZUa8OGCACUfFGALAZV0G+rQ/8xiW3hkGHmOFP0kejZaCZGPO/XGVay+2q0V2cw6CHar+D9F9FomXYA4bAInlY3zOLHdG8ddUTzhHQWOKmzoF9eIW67U9rd9qIR04U9ls9wGLQchqlG/kxHHfR4Js86mwYNgUKW49fQRppig+SsrjT1LS2V5UmVjb3JkPVNTaW1wbGVSb2xlrTNpc3N1ZXI7YW5vbklkcx09q0NoYW5nZU93bmVyUGVybWlzc2lvbq1jY2hhbmdlX293bmVyM1RiakZPRy+tvRy9HQC9Hh+9IL05Pb0irTtpc3N1ZXIyvSW9Jj29J1NjcmVhdGVkX2F0eR03IleFvTm9LStyb2xlcx0rc3RhdGVfvSEvvS4dvS8OF70yFz29NL01xAkBHggcAQABxAABh78/u0UMqu7hxOzj0IawiH/8u95EEGErTKuQYLpude5qjEWouwK0r7dy/gtzAv6oS/W+7s3v5i9NdLsOEmbX7vnqd0+odV02bcQj2mrmdsGYH3b9pLeEPwvkTCxh/t7iqjX+CAwCeaYTpUCyXUfpRbCCd0S5JmtgFDhNqc5MW5wHw9X/xRca54vWjcbeUbsP18rCSQfrf13zJ8QxaTYZataiGca7p16smZA5LXwgbFB7uV5SitJ0Tq/Tuwv3mFzM+OTq3RuL7Nhc9x2PhLJO9SwAdDtti5NinmWDZl7QVWjdd8ZdlAlloxKTZLWMIK1Z4PwLyOhJc9ILYS6ogXuN/T29Nz29OK29Ib06HTNwYXJlbnQ1U2V4cGlyZXNfYXR5HR4nZoWNF70quDa9JsiZhgG9Fx1LYnJhbmNoX2lkBTNvcmlnaW4XPUVNvGD4iaZmW8v6PEuUxHKv/UEjnGknHWWqDrsLXzvBFZVoEN/O80fsHumBvGjQSJ4yvZJPQwLMdtSiXHBMT34RApxO6cCE0yNK5uaOUImY88KlRQHNOSK2mp41MM0GtPBbyBK9QXlybShXhVNjcmVhdGVkX2J5Hz29OK07Y3JlYXRvcr0uDhc9U0tleUFkZHJlc3NDdWFkZHJlc3O8JRCUuKrDe2VkjFZfPL8ANdiRO2jg+ylqKjtdj02jWU6eFKVKcM1DcmV2aXNpb25ovUIda3RyYW5zYWN0aW9uYWwFI3R5cGVTdW5pY2Fwc3VsZTt2ZXJzaW9uGFNzaWduYXR1cmVzDsSoAhcjZXh0c8SXAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEAOqMTyDK+Bd5BnV7m16DkvpEWmch3A//gp5k5x8vQCTwj5W8Pz6HU5AmKHUKu+rti0EpMjFP0y0MEzv9bGo4sGU2NyZWF0ZWRfYXR5cm0oV4U7cHViX2tlecQKAR4IHAEAAcQBAQCHvz+7RQyq7uHE7OPQhrCIf/y73kQQYStMq5Bgum517mqMRai7ArSvt3L+C3MC/qhL9b7uze/mL010uw4SZtfu+ep3T6h1XTZtxCPaauZ2wZgfdv2kt4Q/C+RMLGH+3uKqNf4IDAJ5phOlQLJdR+lFsIJ3RLkma2AUOE2pzkxbnAfD1f/FFxrni9aNxt5Ruw/XysJJB+t/XfMnxDFpNhlq1qIZxrunXqyZkDktfCBsUHu5XlKK0nROr9O7C/eYXMz45OrdG4vs2Fz3HY+Esk71LAB0O22Lk2KeZYNmXtBVaN13xl2UCWWjEpNktYwgrVng/AvI6Elz0gthLqiBe439I3NpZ27EAAFvgK7CPwYtGUyU9JlmpLGZgu93rMbdJyn0Jm1f/spTYHuF4E2xtxuBg1y2xnaUs31XP+g2xy4NNiKTa5g8dmw/7HQXbiFCNXJ87WjyNu7tHobZItzdOm8zyKb5z3oiyfAOaQPqJ28n6AxxfyVqxRMfpNlwJ9VRy1suKRJrDVdQlOOhfADt+1dz1wbrx1AnTz7UmhhTaOV7lS+ItxmQ9UJbxMOpduM9cu/pkAS91+Z538E/vAUHgNIkA1gOuKVg6kMgYIAN4+yN7N7RqvIKFwqyLBWB9dQTLWFGvtPD58/SvUUWKR3I1jCEcY/dnPyk/KJR1F5cWDWDNzXQiArNQlgS");
    U_KEY = dec64("JgAcAQABvIEAvLMxfM+DoEsA8dAJhe+k5RsESPAH+HM++ike3BOJQD+RwXBzRJ3i7FpkJy0m1Q+SNPBBpC9G08O41mJAaVHzNntIBiId0y6dJkQVb5FgdGFX0fi3ZmQo/e3DNErbmBqA30vPL6bhg9cN/Jel4QSKr7hFBENdFEgomiiSa19yp+28gQC4KVCrzd7cUlksW3eq8X2hjQ/+BsRRfEm/00S9Wjj73tXKKLQxbzgniSiusMgEqwPiH/ijPltncChOXd9bqdN7F2YwkCUY94OXMfRUvVKP6rp+L3IwcQdx5iLnEj/7MCGdspkND8hBmIgkIF3FoJg+l2mY/t+9Tfib5R+Tc2CcUQ==");
    SOME_PRIVATE_KEY_2 = dec64('JgAcAQABvIEA96FWTEq/Wjmd7kYbx04I/Ax3OQV+6e4YWu7xBr8k/SexvYvFEE3c9dRsZSsEj7KzYrNpIXezCsxO+j1sHADmeojwuveDdQQM6M6fbvygHq/mxKGllDoJTpzX/CnkuXDwC+lpRkkMTIF48GaYDM525951HYW1pAIYaVr+V5ctVQW8gQDGM71OC1yBLv6n23dEuu9Vqna2lvDpEWNO7MgKY0Ri9vUPwp+F+dUiKsRTbjnukDFqiYiNj+jkcWgiXqnjqdAGf9LUWHfF80W1PwUhkFw7torLJfaAr6bZ6FRzGcxTMad0x7Rz+5lkBjliKqOt8AUAIvMVe45G0c0StJSoqdqc4Q==');
    Unitest.addTest('pack/unpack U', function () {
      var balance1, balance2, contract, contract2, privKey, pubKey;
      privKey = Universa.PrivateKey.fromBOSS(U_KEY);
      pubKey = privKey.publicKey;
      contract = Contract.fromBOSS(U_CONTRACT_BIN);
      contract.temp.lockData;
      contract.temp.lock;
      contract2 = Contract.fromBOSS(contract.temp.currentBinary);
      balance1 = contract.getBalance();
      balance2 = contract2.getBalance();
      // main balance
      //console.log(contract.getBalance(false))
      // test balance
      //console.log(contract.getBalance(true))
      return this.assertEquals(balance1, balance2);
    });
    Unitest.addTest('contract: registerPaid: failed by balance', async function () {
      var api, contract, otherPrivKey, privKey, upack;
      contract = Contract.fromBOSS(U_CONTRACT_BIN);
      privKey = Universa.PrivateKey.fromBOSS(U_KEY);
      otherPrivKey = Universa.PrivateKey.fromBOSS(SOME_PRIVATE_KEY_2);
      contract.temp.sign(privKey);
      upack = Contract.fromBOSS(U_CONTRACT_BIN);
      api = await Node.connect(Universa.PrivateKey.fromBOSS(CONTRACT_KEY));
      return this.assertThrows(Universa.BalanceError, async function () {
        return await contract.createParcel(upack, 999930000, [otherPrivKey], true, true);
      });
    });
    Unitest.addTest('contract: getParcel: failed by key', function () {
      var contract, otherPrivKey, privKey, upack;
      contract = Contract.fromBOSS(U_CONTRACT_BIN);
      privKey = Universa.PrivateKey.fromBOSS(U_KEY);
      otherPrivKey = Universa.PrivateKey.fromBOSS(SOME_PRIVATE_KEY_2);
      contract.temp.sign(privKey);
      upack = Contract.fromBOSS(U_CONTRACT_BIN);
      return this.assertThrows(Universa.NoKeyFound, async function () {
        return await contract.createParcel(upack, 1, [otherPrivKey], true);
      });
    });
    Unitest.addTest('contract: getParcel: failed by creator role', function () {
      var contract, otherPrivKey, privKey, upack;
      contract = Contract.fromBOSS(U_CONTRACT_BIN);
      privKey = Universa.PrivateKey.fromBOSS(U_KEY);
      otherPrivKey = Universa.PrivateKey.fromBOSS(SOME_PRIVATE_KEY_2);
      contract.temp.sign(privKey);
      upack = Contract.fromBOSS(U_CONTRACT_BIN);
      contract.setState("created_by", null);
      return this.assertThrows(Universa.NoRoleFound, async function () {
        return await contract.createParcel(upack, 1, [otherPrivKey], true);
      });
    });
    return Unitest.addTest('contract: getParcel: failed by key', function () {
      var contract, privKey, upack;
      contract = Contract.fromBOSS(U_CONTRACT_BIN);
      privKey = Universa.PrivateKey.fromBOSS(U_KEY);
      contract.temp.sign(privKey);
      upack = Contract.fromBOSS(U_CONTRACT_BIN);
      return this.assertThrows(Universa.NoKeyError, async function () {
        return await contract.createParcel(upack, 1, [], true);
      });
    });
  });

  //   Unitest.addTest 'contract: registerPaid: multi keys', ->
  //         contract = Contract.fromBOSS(U_CONTRACT_BIN)
  //         privKey = Universa.PrivateKey.fromBOSS(U_KEY)
  //         otherPrivKey = Universa.PrivateKey.fromBOSS(SOME_PRIVATE_KEY_2)
  //         contract.temp.sign(privKey)

  //         upack = Contract.fromBOSS(U_CONTRACT_BIN)
  //         api = await Node.connect(Universa.PrivateKey.fromBOSS(CONTRACT_KEY))
  //         parcel = await contract.createParcel(upack, [privKey, otherPrivKey], true)
  //         response = await parcel.register(api)
  //         @assertEquals response.result, true

  // Unitest.addTest 'contract: registerPaid: single key', ->
  //    contract = Contract.fromBOSS(U_CONTRACT_BIN)
  //    privKey = Universa.PrivateKey.fromBOSS(U_KEY)
  //    contract.temp.sign(privKey)

  //    upack = Contract.fromBOSS(U_CONTRACT_BIN)
  //    api = await Node.connect(Universa.PrivateKey.fromBOSS(CONTRACT_KEY))
  //    parcel = await contract.createParcel(upack, [privKey], true)
  //    response = await parcel.register(api)

  //    console.log(response)
  //    @assertEquals response.result, true
}).call(this);