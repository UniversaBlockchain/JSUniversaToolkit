test = window.unitjs || {}

dec64 = Universa.utils.decode64
enc64 = Universa.utils.encode64
Contract = Universa.Contract

Unitest.addTestModule ->
  PACKED_PRIVATE_KEY_1 = dec64 'JgAcAQABvIEA/lcxRgJEfLoN0TqJkN6m/q+qiV3wGn3k53EEyIhVwqpWU9XntSCfPfIcTpfGrd2RvUZFEn1eW1Uc4XkDw5DZ++k2+lvbL5udllpbDtG9bSjG8Y0SruiwOUXijQzW/esWhi4b6OCCAcXCgIDDh5607JWAyS+XEK38V3MqfqfHbd+8gQDPVmtdpdownVM95HWwW/SLzy+XdHJA46pd8ROcnMnHJNjYREjFYeWzWSZJ4BviOXkdni82l8sH+szEcMeXT9m5Dl86L7vAkoUPT06OcUKc4aKB5ZtczMy2O4fCU+w1nmW+sEB/LgXleri2KBkDBwXEivvWXj2WCd8r4CRa+fhamQ=='
  PACKED_PRIVATE_KEY_2 = dec64 'JgAcAQABvIEA96FWTEq/Wjmd7kYbx04I/Ax3OQV+6e4YWu7xBr8k/SexvYvFEE3c9dRsZSsEj7KzYrNpIXezCsxO+j1sHADmeojwuveDdQQM6M6fbvygHq/mxKGllDoJTpzX/CnkuXDwC+lpRkkMTIF48GaYDM525951HYW1pAIYaVr+V5ctVQW8gQDGM71OC1yBLv6n23dEuu9Vqna2lvDpEWNO7MgKY0Ri9vUPwp+F+dUiKsRTbjnukDFqiYiNj+jkcWgiXqnjqdAGf9LUWHfF80W1PwUhkFw7torLJfaAr6bZ6FRzGcxTMad0x7Rz+5lkBjliKqOt8AUAIvMVe45G0c0StJSoqdqc4Q=='

  CONTRACT_KEY = dec64 """
    JgAcAQABvIEAxAgalqIUgnCbe3Cc34xSBkjIl7bbE6TZSDj+rmgM8yjP7UbpLbB85aY2ZxH0OItYwZQH/cawVJGAkTcxTH1A5A7l6P/4o97yP4Qkb7XYpDlwXhvWlHTpvODrI8eT5KIBW+JFHSmHk3NSCQg6XoA7X0+t0vZXr3aMvP4ACw2R8gW8gQC93hQfbkJaNMAJZ+wQMQIVr6Amy1Me4H6v83wDv4gH7TfgGJlJj5MY3HwHtXO5Ac0vcPxVlRgX0VUe5jM1kfB3Q+nV5md4O/oZZMs0NKxusShPckEE5tQnHqt3UNcMw8LL7UVWfCFbmB535hD8RbxODYdnz+R2JDHUEYL8ZlmLRQ==
  """

  CONTRACT_BIN = dec64 """
    J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHIW0+GsAKUpe2uAutc1sVJe5nAtAh2qNy6sbElW63sxkzc2hhNTEyvEC7isYtxwakzwY9oNHrvU0XeC6Rw8P6eRfwKzVLKJlHdxYnJDx8MekWOQbESscLgutSAv1VQVatiWEWVk3bWB/tU2NyZWF0ZWRfYXR5fF94WoU7cHViX2tlecQJAR4IHAEAAcQAAZFkChD3xvmUTaPLsAccyeMbBwcZMugW3cQEEfimLOiSzavEiAGQpCnC8paTpUn1YJEAevCowV1LHMqtbtCxPP9aCIvvDR5GYvblKkBU5f6/slIE4k7IFh6UucvBKb9L5oOh2qPXfsXzYBNenLFsb764Ld88HR/TffanGGoqXNURENpGSe69+W6x8FnvAJNPInAiOeYGJN5g+7bxss15e6+HO53tZKbY1dWin7jxIN6/j/xTY8GgZO1F0AWkrOpMlZeNbqPHIpgThbJWEYyfrlr1pSRr//7mjAPtbJFsbve3+1NdDbCiGuG1J8TC8M7hF4WUlIuBMLi29KGocAh78lkjc2lnbsQAAWZ9UZirUx8WTA+SOjHB6H6n/Q4uziTaU+CobxOtRE+VeFLMQ0AGAt3BhqiWhlgU8w5EUXcrb4XBGPsM2pRQffJ22WmzsIosz5oBj6LUrb83c3lE3ogiXyb0g4ryn5apo5DTHz3HxnnnyNtpFBrej7NdF+0G/g8CV1zBMMtmrH7pbz8FkFTIj8KtBjC35aDRSnz4n/RSO0M0BY1uedDEmm5sQOTFbNxFT8UzOVbGnWMfdMeREyHdI2rH8M4mARSN7IaNWkrNtrNc9rF03tzabZxHj5POX1GEKLxH8auqyEcjGVInvfBo8Rlmxj/0S0ScPCUkXFG6QIqqcZBmt/RLphwjdHlwZVN1bmljYXBzdWxlI2RhdGHEXQIfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucxczWlhnaU96HyNuYW1lM3Jldm9rZSNyb2xlH207QHJldm9rZVt0YXJnZXRfbmFtZStvd25lcjNfX3R5cGVDUm9sZUxpbmulg1Jldm9rZVBlcm1pc3Npb24zTTZ0b1J5P21Tc3BsaXRfam9pbn0fbVtAc3BsaXRfam9pbpWdpa1TZmllbGRfbmFtZTNhbW91bnRLbWluX3ZhbHVlOZqZmZmZmbk/Q21pbl91bml0OZqZmZmZmbk/i2pvaW5fbWF0Y2hfZmllbGRzDmNzdGF0ZS5vcmlnaW6lm1NwbGl0Sm9pblBlcm1pc3Npb24jZGF0YR9LdW5pdF9uYW1la015IHRlc3QgdG9rZW57dW5pdF9zaG9ydF9uYW1lG01US2t0ZW1wbGF0ZV9uYW1la1VOSVRfQ09OVFJBQ1RTY3JlYXRlZF9hdHl7X3hahTNpc3N1ZXInbb0tI2tleXMdS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvCUQGlvDu904h8cszszl6nOZsA2sDamZ/vQBnfi0UIYnPIkDybWOpVNLZXlBZGRyZXNzpVNTaW1wbGVSb2xlK3N0YXRlN70kB1NjcmVhdGVkX2J5H207Y3JlYXRvcpW9LaWtvSx5e194WoWdH22dlb0tpa1DcmV2aXNpb24IU2V4cGlyZXNfYXR5CxBeXoVrdHJhbnNhY3Rpb25hbAWlg1VuaXZlcnNhQ29udHJhY3QbbmV3HTt2ZXJzaW9uGA==
  """

  U_CONTRACT_BIN = dec64 """
    JyNkYXRhxC0GHxtuZXcGQ3Jldm9raW5nDhczX190eXBlM0hhc2hJZFNjb21wb3NpdGUzvGD9tVYDOBLZXut+OXcpO20+EySr2wFDwjOncTtTUVdT/tTcsKqNybVcMf3YX5uMx7iqw0ZmV6ZfGBMv+zgQtB2qCY4hJlm0ICpHwR/CbXQ6iljYY1ZHRNS61SdUlgeLsQpDY29udHJhY3QvS2FwaV9sZXZlbBg9g1VuaXZlcnNhQ29udHJhY3RTZGVmaW5pdGlvbjcjZGF0YRdTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0jbmFtZbN0cmFuc2FjdGlvbiB1bml0cyBwYWNrU3JlZmVyZW5jZXMdW3Blcm1pc3Npb25zJzNKdG9qUHg3raNkZWNyZW1lbnRfcGVybWlzc2lvbkttaW5fdmFsdWUAI3JvbGUfW3RhcmdldF9uYW1lK293bmVyPUNSb2xlTGlua60zb3duZXIyQ21heF9zdGVwClNmaWVsZF9uYW1ls3Rlc3RfdHJhbnNhY3Rpb25fdW5pdHM9u0Bjb20uaWNvZGljaS51bml2ZXJzYS5jb250cmFjdC5wZXJtaXNzaW9ucy5DaGFuZ2VOdW1iZXJQZXJtaXNzaW9uM3BXNDUzcTetvRy9HQC9Hr0fvSQKvSWLdHJhbnNhY3Rpb25fdW5pdHM9vSczbGFVbGFrH70eL0thZGRyZXNzZXMdI2tleXMOFxtrZXkXPWNSU0FQdWJsaWNLZXkzcGFja2VkxAkBHggcAQABxAABxSSWfXW20wGsRn9khVZDtvcCtUqP/scN3oVPU3r0152Fu62pfx9Mjc1cmQnRYSkeZzWA50RYQTU3FlXC5iIN7w+Lm6TGPQxWe+uYGMgKLCbAmyMXPWupvzeB5SEMtylQ5ml12iwFQkamqOiFE2KWMYz/UGhW87/ELPckmpoanZUa8OGCACUfFGALAZV0G+rQ/8xiW3hkGHmOFP0kejZaCZGPO/XGVay+2q0V2cw6CHar+D9F9FomXYA4bAInlY3zOLHdG8ddUTzhHQWOKmzoF9eIW67U9rd9qIR04U9ls9wGLQchqlG/kxHHfR4Js86mwYNgUKW49fQRppig+SsrjT1LS2V5UmVjb3JkPVNTaW1wbGVSb2xlrTNpc3N1ZXI7YW5vbklkcx09q0NoYW5nZU93bmVyUGVybWlzc2lvbq1jY2hhbmdlX293bmVyM1RiakZPRy+tvRy9HQC9Hh+9IL05Pb0irTtpc3N1ZXIyvSW9Jj29J1NjcmVhdGVkX2F0eR03IleFvTm9LStyb2xlcx0rc3RhdGVfvSEvvS4dvS8OF70yFz29NL01xAkBHggcAQABxAABh78/u0UMqu7hxOzj0IawiH/8u95EEGErTKuQYLpude5qjEWouwK0r7dy/gtzAv6oS/W+7s3v5i9NdLsOEmbX7vnqd0+odV02bcQj2mrmdsGYH3b9pLeEPwvkTCxh/t7iqjX+CAwCeaYTpUCyXUfpRbCCd0S5JmtgFDhNqc5MW5wHw9X/xRca54vWjcbeUbsP18rCSQfrf13zJ8QxaTYZataiGca7p16smZA5LXwgbFB7uV5SitJ0Tq/Tuwv3mFzM+OTq3RuL7Nhc9x2PhLJO9SwAdDtti5NinmWDZl7QVWjdd8ZdlAlloxKTZLWMIK1Z4PwLyOhJc9ILYS6ogXuN/T29Nz29OK29Ib06HTNwYXJlbnQ1U2V4cGlyZXNfYXR5HR4nZoWNF70quDa9JsiZhgG9Fx1LYnJhbmNoX2lkBTNvcmlnaW4XPUVNvGD4iaZmW8v6PEuUxHKv/UEjnGknHWWqDrsLXzvBFZVoEN/O80fsHumBvGjQSJ4yvZJPQwLMdtSiXHBMT34RApxO6cCE0yNK5uaOUImY88KlRQHNOSK2mp41MM0GtPBbyBK9QXlybShXhVNjcmVhdGVkX2J5Hz29OK07Y3JlYXRvcr0uDhc9U0tleUFkZHJlc3NDdWFkZHJlc3O8JRCUuKrDe2VkjFZfPL8ANdiRO2jg+ylqKjtdj02jWU6eFKVKcM1DcmV2aXNpb25ovUIda3RyYW5zYWN0aW9uYWwFI3R5cGVTdW5pY2Fwc3VsZTt2ZXJzaW9uGFNzaWduYXR1cmVzDsSoAhcjZXh0c8SXAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEAOqMTyDK+Bd5BnV7m16DkvpEWmch3A//gp5k5x8vQCTwj5W8Pz6HU5AmKHUKu+rti0EpMjFP0y0MEzv9bGo4sGU2NyZWF0ZWRfYXR5cm0oV4U7cHViX2tlecQKAR4IHAEAAcQBAQCHvz+7RQyq7uHE7OPQhrCIf/y73kQQYStMq5Bgum517mqMRai7ArSvt3L+C3MC/qhL9b7uze/mL010uw4SZtfu+ep3T6h1XTZtxCPaauZ2wZgfdv2kt4Q/C+RMLGH+3uKqNf4IDAJ5phOlQLJdR+lFsIJ3RLkma2AUOE2pzkxbnAfD1f/FFxrni9aNxt5Ruw/XysJJB+t/XfMnxDFpNhlq1qIZxrunXqyZkDktfCBsUHu5XlKK0nROr9O7C/eYXMz45OrdG4vs2Fz3HY+Esk71LAB0O22Lk2KeZYNmXtBVaN13xl2UCWWjEpNktYwgrVng/AvI6Elz0gthLqiBe439I3NpZ27EAAFvgK7CPwYtGUyU9JlmpLGZgu93rMbdJyn0Jm1f/spTYHuF4E2xtxuBg1y2xnaUs31XP+g2xy4NNiKTa5g8dmw/7HQXbiFCNXJ87WjyNu7tHobZItzdOm8zyKb5z3oiyfAOaQPqJ28n6AxxfyVqxRMfpNlwJ9VRy1suKRJrDVdQlOOhfADt+1dz1wbrx1AnTz7UmhhTaOV7lS+ItxmQ9UJbxMOpduM9cu/pkAS91+Z538E/vAUHgNIkA1gOuKVg6kMgYIAN4+yN7N7RqvIKFwqyLBWB9dQTLWFGvtPD58/SvUUWKR3I1jCEcY/dnPyk/KJR1F5cWDWDNzXQiArNQlgS
  """

  U_CONTRACT_BIN2 = dec64 """
    J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEBcxlqSlB4NbdJ6Q4BNJbg7AOzO4vnfWO/DEsG5/E5fIvjKztMOM/yCla5n2qsPa9uqnKgUc9YABsg5PIn/+9QGU2NyZWF0ZWRfYXR5JBY9WIU7cHViX2tlecQJAR4IHAEAAcQAAYe/P7tFDKru4cTs49CGsIh//LveRBBhK0yrkGC6bnXuaoxFqLsCtK+3cv4LcwL+qEv1vu7N7+YvTXS7DhJm1+756ndPqHVdNm3EI9pq5nbBmB92/aS3hD8L5EwsYf7e4qo1/ggMAnmmE6VAsl1H6UWwgndEuSZrYBQ4TanOTFucB8PV/8UXGueL1o3G3lG7D9fKwkkH639d8yfEMWk2GWrWohnGu6derJmQOS18IGxQe7leUorSdE6v07sL95hczPjk6t0bi+zYXPcdj4SyTvUsAHQ7bYuTYp5lg2Ze0FVo3XfGXZQJZaMSk2S1jCCtWeD8C8joSXPSC2EuqIF7jf0jc2lnbsQAASy+FLzeCJ7at/IZqkbuVuydfJZWuPfu9yWQVISBnNMI0hbyWb9sVGBvmvKBGAlEntlTFvNslpz0iMAM9ozZbnXjcbyQSPVPXFZmLlKSOYLHYPCZKTNy2BFzaM8m5bzwzqb9EGDRPfjfTmiJ7Gp5RZU/cXoThGfQZjzVTIDV8P9akRgUks29pdXkjtHHBqQhow4clied1ndoUv+yoVWeyWBGHnnCmPWReSUY2jQiOxvn9KYFNiOhR1WpoDIZGTY/VAoxz7U5eSt2rOTtKxiuAhTPR5VKkrjqbhz+z0TDxmOoDIZabLkkMBl+zewNb/7dasSfPUiI1oB38ky1h1i5L1ojdHlwZVN1bmljYXBzdWxlI2RhdGHEJwYfQ3Jldm9raW5nDhdTY29tcG9zaXRlM7xgFFwMWOUUVelGIcTBzAg/2mjKu+e/QrI3flnx0PmFHExXhBj+GF2/X02cDVgRPJdoILS7Qfidu2ES5tFwByL9oC2I+Bz4QPOy08uvwLqMFH0mUtlAXbPUt/pIIeKJyqnlM19fdHlwZTNIYXNoSWRDY29udHJhY3QvS2FwaV9sZXZlbBhTZGVmaW5pdGlvbjdbcGVybWlzc2lvbnMnM1RiakZPRy8jbmFtZaNkZWNyZW1lbnRfcGVybWlzc2lvbiNyb2xlH5U7aXNzdWVyMlt0YXJnZXRfbmFtZTNpc3N1ZXI9Q1JvbGVMaW5rU2ZpZWxkX25hbWWzdGVzdF90cmFuc2FjdGlvbl91bml0c0ttaW5fdmFsdWUAPbtAY29tLmljb2RpY2kudW5pdmVyc2EuY29udHJhY3QucGVybWlzc2lvbnMuQ2hhbmdlTnVtYmVyUGVybWlzc2lvbjNsYVVsYWsflWNjaGFuZ2Vfb3duZXKlJ5W9GCNrZXlzDhcba2V5FzNwYWNrZWTECQEeCBwBAAHEAAHFJJZ9dbbTAaxGf2SFVkO29wK1So/+xw3ehU9TevTXnYW7ral/H0yNzVyZCdFhKR5nNYDnRFhBNTcWVcLmIg3vD4ubpMY9DFZ765gYyAosJsCbIxc9a6m/N4HlIQy3KVDmaXXaLAVCRqao6IUTYpYxjP9QaFbzv8Qs9ySamhqdlRrw4YIAJR8UYAsBlXQb6tD/zGJbeGQYeY4U/SR6NloJkY879cZVrL7arRXZzDoIdqv4P0X0WiZdgDhsAieVjfM4sd0bx11RPOEdBY4qbOgX14hbrtT2t32ohHThT2Wz3AYtByGqUb+TEcd9HgmzzqbBg2BQpbj19BGmmKD5KyuNPWNSU0FQdWJsaWNLZXk9S0tleVJlY29yZEthZGRyZXNzZXMGPVNTaW1wbGVSb2xlPatDaGFuZ2VPd25lclBlcm1pc3Npb24zSnRvalB4N5WdpR+VM293bmVyMr0XK293bmVyPb0ZvRq9G70cAENtYXhfc3RlcAo9vR0zcFc0NTNxN5Wdpb0xvRqLdHJhbnNhY3Rpb25fdW5pdHO9HAC9NAo9vR1TcmVmZXJlbmNlc70sU2NyZWF0ZWRfYXR5HTciV4UjZGF0YReVs3RyYW5zYWN0aW9uIHVuaXRzIHBhY2tTaXNzdWVyTmFtZbsXVW5pdmVyc2EgUmVzZXJ2ZSBTeXN0ZW0rcm9sZXO9LL0YvSErc3RhdGVfS2JyYW5jaF9pZAW9OL0sU2NyZWF0ZWRfYnknlTtjcmVhdG9yvSK9LL0rDhdDdWFkZHJlc3O8JRCUuKrDe2VkjFZfPL8ANdiRO2jg+ylqKjtdj02jWU6eFKVKcM09U0tleUFkZHJlc3M9vS29OXkkFj1Yhb06F703uDa9G8iYhgG9MyeVvTO9Ig4XvSUXvSfECQEeCBwBAAHEAAGHvz+7RQyq7uHE7OPQhrCIf/y73kQQYStMq5Bgum517mqMRai7ArSvt3L+C3MC/qhL9b7uze/mL010uw4SZtfu+ep3T6h1XTZtxCPaauZ2wZgfdv2kt4Q/C+RMLGH+3uKqNf4IDAJ5phOlQLJdR+lFsIJ3RLkma2AUOE2pzkxbnAfD1f/FFxrni9aNxt5Ruw/XysJJB+t/XfMnxDFpNhlq1qIZxrunXqyZkDktfCBsUHu5XlKK0nROr9O7C/eYXMz45OrdG4vs2Fz3HY+Esk71LAB0O22Lk2KeZYNmXtBVaN13xl2UCWWjEpNktYwgrVng/AvI6Elz0gthLqiBe439Pb0pPb0qvSu9LD29Lb0/vSxDcmV2aXNpb25wM29yaWdpbhctvGD4iaZmW8v6PEuUxHKv/UEjnGknHWWqDrsLXzvBFZVoEN/O80fsHumBvGjQSJ4yvZJPQwLMdtSiXHBMT34RApxO6cCE0yNK5uaOUImY88KlRQHNOSK2mp41MM0GtPBbyBI9RVNleHBpcmVzX2F0eR0eJ2aFM3BhcmVudCVrdHJhbnNhY3Rpb25hbAU9g1VuaXZlcnNhQ29udHJhY3QbbmV3vSw7dmVyc2lvbhg=
  """

  CONTRACT_BIN2 = dec64 """
    J1NzaWduYXR1cmVzDsSnAhcjZXh0c8SWAScba2V5vCEHDjGDk1tq6hLXQgGtR6ZKDdFqZMB3RlPBTpZnLWyIwKMzc2hhNTEyvEDcahLFdkVg9A8MoGeqaL4hF+ffW6zfRgYVlydKanXjOLvt98hBa0osmUBhkTortfamr+E6x8ys4orvUARbQUwdU2NyZWF0ZWRfYXR5JBY9WIU7cHViX2tlecQJAR4IHAEAAcQAAYe/P7tFDKru4cTs49CGsIh//LveRBBhK0yrkGC6bnXuaoxFqLsCtK+3cv4LcwL+qEv1vu7N7+YvTXS7DhJm1+756ndPqHVdNm3EI9pq5nbBmB92/aS3hD8L5EwsYf7e4qo1/ggMAnmmE6VAsl1H6UWwgndEuSZrYBQ4TanOTFucB8PV/8UXGueL1o3G3lG7D9fKwkkH639d8yfEMWk2GWrWohnGu6derJmQOS18IGxQe7leUorSdE6v07sL95hczPjk6t0bi+zYXPcdj4SyTvUsAHQ7bYuTYp5lg2Ze0FVo3XfGXZQJZaMSk2S1jCCtWeD8C8joSXPSC2EuqIF7jf0jc2lnbsQAAWaqzL8OtPVvsuMJ3zfvFfcwyJxYxY1E82XkvRAi8HVr+LBqO18WgsuiJp1XRTVYnWMFT1Wen3XMyuZibsjAqKraZ+H6gHZiq0phlJ+CvX8EWL2GDhfyf6iIzVXe2xgYqOccCR8z1wRzsBU3FSAvw2f9HQY75i8Y4/s8A+JCaTqaYTCoxJcyPyTw4mBWRPmanyLal4/E5KHpep/nqpTZ3BMMQsjpRfVoHjwUV8yV4frjARC3drIpcq+pxirzNs5N+KqoYpX/tGtv5mA6AmjbZ0luS6m/18+Hb6qRM/mPOC0TR4Ji62xU6Mi288vZoKBOu/FJyikBDCJiOqhV65+t9DAjdHlwZVN1bmljYXBzdWxlI2RhdGHEgwEfQ3Jldm9raW5nBkNjb250cmFjdC9LYXBpX2xldmVsGFNkZWZpbml0aW9uJ1twZXJtaXNzaW9ucw8zaVRuZjBiHyNuYW1lM3Jldm9rZSNyb2xlH207QHJldm9rZVt0YXJnZXRfbmFtZStvd25lcjNfX3R5cGVDUm9sZUxpbmulg1Jldm9rZVBlcm1pc3Npb25TY3JlYXRlZF9hdHkiFj1YhSNkYXRhBzNpc3N1ZXInbb0aI2tleXMdS2FkZHJlc3Nlcw4XQ3VhZGRyZXNzvCUQlLiqw3tlZIxWXzy/ADXYkTto4Pspaio7XY9No1lOnhSlSnDNpVNLZXlBZGRyZXNzpVNTaW1wbGVSb2xlK3N0YXRlN70XeSIWPViFU2NyZWF0ZWRfYnkfbTtjcmVhdG9ylb0apa29GL0ZnR9tnZW9GqWtQ3JldmlzaW9uCFNleHBpcmVzX2F0eSIqIlyFa3RyYW5zYWN0aW9uYWwFpYNVbml2ZXJzYUNvbnRyYWN0G25ldx07dmVyc2lvbhg=
  """

  U_KEY = dec64 """
    JgAcAQABvIEAvLMxfM+DoEsA8dAJhe+k5RsESPAH+HM++ike3BOJQD+RwXBzRJ3i7FpkJy0m1Q+SNPBBpC9G08O41mJAaVHzNntIBiId0y6dJkQVb5FgdGFX0fi3ZmQo/e3DNErbmBqA30vPL6bhg9cN/Jel4QSKr7hFBENdFEgomiiSa19yp+28gQC4KVCrzd7cUlksW3eq8X2hjQ/+BsRRfEm/00S9Wjj73tXKKLQxbzgniSiusMgEqwPiH/ijPltncChOXd9bqdN7F2YwkCUY94OXMfRUvVKP6rp+L3IwcQdx5iLnEj/7MCGdspkND8hBmIgkIF3FoJg+l2mY/t+9Tfib5R+Tc2CcUQ==
  """

  APP_TOKEN = "ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw=="

  UPACK_BIN = dec64 "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"
  UPACK_KEY = dec64 "JgAcAQABvIDzPjpWf3vcSCW1o6CJp4RRgysmSp1GbgxCyMv75GoYtIw+oBPdboWf3o78gcc165fgW+GDjzhnfdQ8rY6fhGl8gV5FUmhmb9aKwcG75914laSQZDNvMi2jzZu5DwvOwk1Qg+6XL3Oa4//9QUgsYu7RUnavJg0nUVXID2KW5VRqk7yA0GhWxMiibwJjfeXiVTlo79MtKpI97NCF1J2m+bP8U+jEp6El/HL0HSa+UJwWm+0CYwTPvvdHZ8HueBJ9N/ig31c8S4ML6NX+3BpBlkUWc3y2TWjzjdKDEy3rbB9I3gJSbhKIg+52Ju+bC19KC0TvYCXSaQH1yFo1eOMJqkS+sXM="

  FAILED_CONTRACT_BIN_A = dec64 "JyNkYXRhxB8GHxtuZXcGQ3Jldm9raW5nHUNjb250cmFjdC9LYXBpX2xldmVsGDNfX3R5cGWDVW5pdmVyc2FDb250cmFjdFNkZWZpbml0aW9uJyNkYXRhH3NzaG9ydF9jdXJyZW5jeStUUFQtNCNuYW1lfUNjdXJyZW5jeX1bcGVybWlzc2lvbnMfM1ZsTzFDTB+FM3Jldm9rZSNyb2xlH1t0YXJnZXRfbmFtZStvd25lckVDUm9sZUxpbmuFO0ByZXZva2VFg1Jldm9rZVBlcm1pc3Npb24zbTJIaHZ1P4tqb2luX21hdGNoX2ZpZWxkcxa7GGRlZmluaXRpb24uZGF0YS5jdXJyZW5jeYtkZWZpbml0aW9uLmlzc3VlckttaW5fdmFsdWU5exSuR+F6hD+9Fx+9Gb0aRb0bhVtAc3BsaXRfam9pbkNtaW5fdW5pdDl7FK5H4XqEP0WbU3BsaXRKb2luUGVybWlzc2lvboVTc3BsaXRfam9pblNmaWVsZF9uYW1lM2Ftb3VudDNhUG1LWHkfhWNjaGFuZ2Vfb3duZXK9Fx+9Gb0aRb0bhWtAY2hhbmdlX293bmVyRatDaGFuZ2VPd25lclBlcm1pc3Npb25TY3JlYXRlZF9hdHlAHgZZhTNpc3N1ZXIvS2FkZHJlc3Nlcw4XRVNLZXlBZGRyZXNzQ3VhZGRyZXNzvCUgLvmeRLSqilCsS6pi8VZpUcY62Aati76XVvT4TO/ogKLvAYtnI2tleXMdRVNTaW1wbGVSb2xlhb0zO2Fub25JZHMdK3N0YXRlT70aL701DhdFvTi9ObwlICxI4rxzEiaUCiaz9K9JkLwB9jPQeV4+osS05qP5fe83dIyjXb07HUW9PIW9Gr09HTNwYXJlbnQXU2NvbXBvc2l0ZTO8YAg/bGc0/OuduTE63okZXf5brZbibC/Y9na+kNWFepGS5xKxDeZnZuA/Jj+agsC5sjEnUzPiT2zbzY3OiwNAPtEdyOMW4k5Kq1L9+QM4XZNr9AcIrhph92eULOCt88CtbUUzSGFzaElkU2V4cGlyZXNfYXR5QEQjJIZlD70rOa5H4XoUknBAS2JyYW5jaF9pZBszOjEzb3JpZ2luF71GvGDRNlYc1gjbdmNYbIG3N817L9OIlBAGEKkluUtt/Rn7++SN0ojLcGfju0Fvv/wb19OOy7MXNdPl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"

  Unitest.addTest 'should read float amount', ->
    contract = Contract.fromBOSS(FAILED_CONTRACT_BIN_A)
    console.log("<><><>")
    @assertEquals 1, 1

  Unitest.addTest 'get walletID', ->
    contractBin = dec64 "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"
    contract = Contract.fromBOSS(contractBin)
    @assertEquals contract.walletID(), ""

  Unitest.addTest 'register undefined contract', ->
    UPack = Universa.Contract.fromBOSS dec64 "JyNkYXRhxA0DHxtuZXcGQ3Jldm9raW5nHUNjb250cmFjdCdLYXBpX2xldmVsGDNfX3R5cGWDVW5pdmVyc2FDb250cmFjdFNkZWZpbml0aW9uLyNkYXRhF1Npc3N1ZXJOYW1luxdVbml2ZXJzYSBSZXNlcnZlIFN5c3RlbSNuYW1ls3RyYW5zYWN0aW9uIHVuaXRzIHBhY2tTcmVmZXJlbmNlcx1bcGVybWlzc2lvbnMvM0dLTlpsWi+Fo2RlY3JlbWVudF9wZXJtaXNzaW9uS21pbl92YWx1ZQAjcm9sZR9bdGFyZ2V0X25hbWUzaXNzdWVyRUNSb2xlTGlua4U7QGlzc3VlclNmaWVsZF9uYW1ls3Rlc3RfdHJhbnNhY3Rpb25fdW5pdHNFs0NoYW5nZU51bWJlclBlcm1pc3Npb24zYkwyQkllN4W9F70YAL0ZH70bK293bmVyRb0dhTNAb3duZXJDbWF4X3N0ZXAKvR+LdHJhbnNhY3Rpb25fdW5pdHNFvSEzYWtJbzlPN4W9F70YAL0ZvSS9Jwq9H70gRb0hMzVmTjZFOC+FvRe9GAC9Gb0avR+9KEW9ITNRMER0R0sfvRm9GkWDUmV2b2tlUGVybWlzc2lvboUzcmV2b2tlU2NyZWF0ZWRfYXR5DEolX4W9HC9LYWRkcmVzc2VzDhdFU0tleUFkZHJlc3NDdWFkZHJlc3O8NRAXzdKDoWpm+j2Lw1TPbko+ja9ZB/G4Mlww7b7zPvNwAuZCPPsFPqJwQtorTOmXTdNtRxNkI2tleXMdRVNTaW1wbGVSb2xlhb0cO2Fub25JZHMdK3N0YXRlV70lL70zDhdFvTa9N7wlEJtHeDmMH1W5X/NPhitbnZvxpnxnWb8dKZzfCAQM7PSzPgY5gr05HUW9OoW9Jb07HTNwYXJlbnQFU2V4cGlyZXNfYXR5DDEqboVlF70oCL0gwOgDlR1LYnJhbmNoX2lkBTNvcmlnaW4FvTF5DEolX4VTY3JlYXRlZF9ieR+9G70cRb0dhTtjcmVhdG9yQ3JldmlzaW9uCCN0eXBlU3VuaWNhcHN1bGU7dmVyc2lvbhhTc2lnbmF0dXJlcwY="

    UndefinedContract = Universa.Contract.fromBOSS dec64 ""

    cryptoCloudAPI = await CryptoCloud.connectWithPassword APP_TOKEN, 'sanmarino', 'adminadmin'
    nodeApi = await Node.connect(cryptoCloudAPI.privateKey)

    console.warn('-------------- PREFLIGHT CHECKS ----------------')

    console.warn('--- CONTRACT STATE ---')
    contractState = (await UndefinedContract.checkOriginal(nodeApi)).itemResult.state
    console.log(contractState)
    @assertEquals contractState, "UNDEFINED"

    console.warn('--- CONTRACT OWNER ---')
    isOwner = UndefinedContract.original.isRoleAvailable('owner', [cryptoCloudAPI.privateKey.publicKey])
    console.log(isOwner)

    console.warn('--- UPACK STATE ---')
    upackState = (await UPack.checkOriginal(nodeApi)).itemResult.state
    console.log(upackState)
    @assertEquals upackState, "APPROVED"

    console.warn('--- UPACK AMOUNT ---')
    console.log(UPack.getBalance())
    @assertTrue UPack.getBalance() > 0

    console.warn('--- UPACK OWNER ---')
    isOwner = UPack.original.isRoleAvailable('owner', [cryptoCloudAPI.privateKey.publicKey])
    console.log(isOwner)
    @assertTrue isOwner

    console.warn('-------------- REGISTER CONTRACT ----------------')

    parcel = UndefinedContract.createParcel(
      UPack,
      1,
      [cryptoCloudAPI.privateKey],
      false,
      false
    )

    await parcel.register(nodeApi)

    paymentState = UndefinedContract.checkPending(nodeApi)
    console.warn paymentState.itemResult.state

    setTimeout (->
      paymentState = UndefinedContract.checkPending(nodeApi)
      console.warn paymentState.itemResult.state
      return
    ), 7000

  Unitest.addTest 'create Parcel only without registration', ->
    somePrivateKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    somePublicKey = somePrivateKey.publicKey
    upack = Contract.fromBOSS(UPACK_BIN)
    upackPrivateKey = Universa.PrivateKey.fromBOSS(UPACK_KEY)

    contract = Universa.Contract.createToken(
      somePublicKey,
      '10000',
      1,
      'LPL',
      'LPL',
      'LPL',
      false
    )

    contract.createParcel(upack, 1, [upackPrivateKey, somePrivateKey], false, false)

    console.log("SAVE ME!!! new payment binary", enc64(upack.pending.currentBinary))

  Unitest.addTest 'create Parcel', ->
    somePrivateKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    somePublicKey = somePrivateKey.publicKey

    nodeApi = await Node.connect(somePrivateKey)
    upackPrivateKey = Universa.PrivateKey.fromBOSS(UPACK_KEY)

    upack = Contract.fromBOSS(UPACK_BIN)
    myToken = Contract.createToken(somePublicKey, '100', 0.1, "My test token", "MTK", "", false)

    console.log("payment", upack)
    console.log("contract", myToken)

    paymentState = await upack.checkOriginal(nodeApi)
    contractState = await myToken.checkOriginal(nodeApi)

    console.log("payment is #{paymentState.itemResult.state}, contract is #{contractState.itemResult.state}")

    parcel = myToken.createParcel(upack, 1, [upackPrivateKey, somePrivateKey], false, false)

    console.log("new payment ID", enc64(upack.pending.hashId()))
    console.log("new contract ID", enc64(myToken.pending.hashId()))

    console.log("SAVE ME!!! new payment binary", enc64(upack.pending.currentBinary))
    console.log("SAVE ME!!! new contract binary", enc64(myToken.pending.currentBinary))

    registerResponse = await parcel.register(nodeApi)

    console.log(registerResponse)

    checkContracts = ->
      paymentState = await upack.checkPending(nodeApi)
      contractState = await myToken.checkPending(nodeApi)

      if paymentState.itemResult.state == 'APPROVED'
        upack.updateOriginal()
        console.log("NEW ORIGINAL ID", enc64(upack.original.hashId()))

      if paymentState.itemResult.state == 'DECLINED' then console.log(paymentState.itemResult)
      console.log("payment is #{paymentState.itemResult.state}, contract is #{contractState.itemResult.state}")

    setInterval(checkContracts, 2000)

  Unitest.addTest 'check model Contract', ->
    api = await Node.connect(Universa.PrivateKey.fromBOSS(CONTRACT_KEY))
    contract = Contract.fromBOSS(CONTRACT_BIN)
    response = await contract.checkOriginal(api)

    @assertEquals response.itemResult.state, 'APPROVED'

  Unitest.addTest 'get cost of Contract', ->
    contract = Contract.fromBOSS(CONTRACT_BIN)
    response = await XChange.getCost(contract.original)

    console.log(response)

    @assertEquals response.cost, 1

    test
      .number(response.cost)
        .isEqualTo(1)

  Unitest.addTest 'is U contract?', ->
    contract = Contract.fromBOSS(U_CONTRACT_BIN)
    @assertTrue contract.isUPack

    contract2 = Contract.fromBOSS(CONTRACT_BIN)
    @assertFalse contract2.isUPack

    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    contract3 = Contract.create(pubKey, '100', 0.1, "My test token", "MTK", "GENERAL_CONTRACT")
    @assertFalse contract3.isUPack

  Unitest.addTest 'v2 import alice', ->
    chatleAPI = await CryptoCloud.connectWithPassword 'ehUEdnfhDqhBAWK77Rndam0d+L6NVhGDGm/ma3SHHZQA4kgs4uf1AnYJKqKHU2qQZchSeieZyquGOuCHeUtULw==', 'alice', 'P@55w0rd'
    res = await Universa.Contract.allFromCloud chatleAPI
    console.log(res)

  Unitest.addTest 'check U', ->
    privKey = Universa.PrivateKey.fromBOSS(U_KEY)
    pubKey = privKey.publicKey

    api = await Node.connect(privKey)
    contract = Contract.fromBOSS(U_CONTRACT_BIN)

    response = await contract.checkOriginal(api)

    console.log(response)

    @assertEquals response.itemResult.state, "UNDEFINED"

  Unitest.addTest 'get role of contract', ->
    contract = Contract.fromBOSS(U_CONTRACT_BIN)
    privKey = Universa.PrivateKey.fromBOSS(U_KEY)
    pubKey = privKey.publicKey

    failedPrivKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    failedPubKey = failedPrivKey.publicKey

    owner = contract.temp.getRole("owner")
    keys = [pubKey, pubKey]

    @assertTrue contract.isUPack
    @assertTrue owner.availableForKeys([pubKey])
    @assertFalse owner.availableForKeys([failedPubKey])
    @assertFalse owner.availableForKeys([])
    @assertTrue owner.availableForKeys([pubKey, failedPubKey])

  Unitest.addTest 'check U pack2', ->
    privKey = Universa.PrivateKey.fromBOSS(U_KEY)
    pubKey = privKey.publicKey

    api = await Node.connect(privKey)
    contract = Contract.fromBOSS(U_CONTRACT_BIN2)

    response = await contract.checkOriginal(api)

    console.log(response)

    @assertEquals response.itemResult.state, "APPROVED"

  Unitest.addTest 'check contract2', ->
    privKey = Universa.PrivateKey.fromBOSS(U_KEY)
    pubKey = privKey.publicKey

    api = await Node.connect(privKey)
    contract = Contract.fromBOSS(CONTRACT_BIN2)

    response = await contract.checkOriginal(api)

    console.log(response)

    @assertEquals response.itemResult.state, "APPROVED"


  Unitest.addTest 'get all roles', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    @assertTrue typeof privKey == "object"

    pubKey = privKey.publicKey
    @assertTrue typeof pubKey == "object"

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")
    @assertTrue typeof contract == "object"
    @assertFalse contract.isUPack

    roles = contract.temp.getRoles
    console.log('***', typeof roles, '***:\n', roles)
    @assertTrue typeof roles == "object"
    @assertEquals Object.keys(roles).length, 3


  Unitest.addTest 'get roles by a public key', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    privKey2 = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_2)
    pubKey2 = privKey2.publicKey

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")
    @assertTrue typeof contract == "object"
    @assertFalse contract.isUPack

    contract.setOwner(pubKey2)

    roles = contract.temp.getRolesForPublicKey(pubKey)
    console.log('***', typeof roles, '***:\n', roles)
    @assertFalse typeof roles == "array"
    @assertEquals roles.length, 2

    roles2 = contract.temp.getRolesForPublicKey(pubKey2)
    console.log('***', typeof roles2, '***:\n', roles2)
    @assertFalse typeof roles == "array"
    @assertEquals roles2.length, 1


  Unitest.addTest 'get roles by a key pair', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey
    pair = Universa.Pair.FromPrivateKey(privKey)

    privKey2 = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1)
    pubKey2 = privKey2.publicKey
    pair2 = Universa.Pair.FromPrivateKey(privKey2)

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")
    @assertTrue typeof privKey == "object"
    @assertFalse contract.isUPack

    contract.setOwner(pubKey2)

    roles = contract.temp.getRolesForPair(pair)
    console.log('***', typeof roles, '***:\n', roles)
    @assertFalse typeof roles == "array"
    @assertEquals roles.length, 2

    roles2 = contract.temp.getRolesForPair(pair2)
    console.log('***', typeof roles2, '***:\n', roles2)
    @assertFalse typeof roles2 == "array"
    @assertEquals roles2.length, 1


  Unitest.addTest 'get roles by a KeyAddress', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    privKey2 = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_1)
    pubKey2 = privKey2.publicKey

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")
    @assertTrue typeof privKey == "object"
    @assertFalse contract.isUPack

    contract.setOwner(pubKey2)

    address = Universa.KeyAddress(pubKey)
    console.log('***', typeof address, '***:\n', address)

    roles = contract.temp.getRolesForKeyAddress(address)
    console.log('***', typeof roles, '***:\n', roles)
    @assertFalse typeof roles == "array"
    @assertEquals roles.length, 1

    address2 = Universa.KeyAddress(pubKey2)
    console.log('***', typeof address2, '***:\n', address2)

    roles2 = contract.temp.getRolesForKeyAddress(address2)
    console.log('***', typeof roles2, '***:\n', roles2)
    @assertFalse typeof roles2 == "array"
    @assertEquals roles2.length, 1

  Unitest.addTest 'get roles by a UAddress', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    privKey2 = Universa.PrivateKey.fromBOSS(PACKED_PRIVATE_KEY_2)
    pubKey2 = privKey2.publicKey

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")
    console.log('*** Contract ***', typeof contract, '***:\n', contract)

    contract
      .should.be.instanceof(Object)

    test
      .bool(contract.isUPack)
        .isNotTrue()

    contract.setOwner(pubKey2)

    address = Universa.UAddress(pubKey)
    console.log('*** Address ***', typeof address, '***:\n', address)

    address
      .should.be.instanceof(Object)

    roles = contract.temp.getRolesForUAddress(address)
    console.log('*** Roles ***', typeof roles, '***:\n', roles)

    roles
      .should.be.instanceof(Array).and
      .have.lengthOf(1)

    address2 = Universa.UAddress(pubKey2)
    console.log('*** Address ***', typeof address2, '***:\n', address2)

    address2
      .should.be.instanceof(Object)

    roles2 = contract.temp.getRolesForUAddress(address2)
    console.log('*** Roles ***', typeof roles2, '***:\n', roles2)

    roles2
      .should.be.instanceof(Array).and
      .have.lengthOf(1)

  Unitest.addTest 'revert original', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey
    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")

    @assertTrue contract.temp.getState("data.amount") == '100.0'

    contract.temp.setState("data.amount", '200')

    @assertTrue contract.temp.getState("data.amount") == '200'
    @assertTrue contract.original.getState("data.amount") == '100.0'

    contract.revertOriginal()

    @assertTrue contract.temp.getState("data.amount") == '100.0'
    @assertTrue contract.original.getState("data.amount") == '100.0'

  Unitest.addTest 'simple transaction pack wrapper', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey
    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "")

    contract.temp.setState("data.amount", 200)

    tpack = contract.getTransactionPack()

  Unitest.addTest 'create mintable token', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    contract = Universa.MintableContract.create(pubKey, "100", 0.1, "My mintable token", "MMT", "some desc", false)
    # contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK")

    contractCopy = contract.createCopy("200")

    console.log(contractCopy)

    @assertEquals contract.walletID(), "J3bv9Ch1+3Th1jq8qu66BUYRjbUCNYzx1eKaR9pRATo="
    @assertEquals contract.walletID(), contractCopy.walletID()

  Unitest.addTest 'toFromJsObject', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "", false)
    contract.setContractName("my contract name")
    info = contract.toJsObject()
    console.log(info)
    info.temp = enc64(info.temp)
    info.original = enc64(info.original)
    converted = JSON.parse(JSON.stringify(info))
    converted.temp = dec64(converted.temp)
    converted.original = dec64(converted.original)

    newContract = Contract.fromJsObject(converted)

    @assertTrue newContract.original.size == contract.original.size
    @assertTrue newContract.temp.size == contract.temp.size
    @assertTrue newContract.pending == contract.pending

    console.log(newContract)

  Unitest.addTest 'v2 import with toJsObject cloud save', ->
    TEST_APP_TOKEN = "X19URVNUSU5HX1RPS0VOX2xramhsZGtqcWUhQCRsa2poYjMyMDk4NDFkdWIkOTE3LWghbGtqa2wsaTk="
    chatleAPI = await CryptoCloud.connectWithPassword TEST_APP_TOKEN, 'pollos', 'adminadmin'
    contracts = await Universa.Contract.allFromCloud(chatleAPI)

    initialCount = contracts.length

    await Universa.Contract.fromJsObject(contracts[0].toJsObject()).toCloud(chatleAPI)

    contracts = await Universa.Contract.allFromCloud(chatleAPI)
    @assertEquals contracts.length, initialCount

  Unitest.addTest 'toFromCloud', ->
    privKey = Universa.PrivateKey.fromBOSS(CONTRACT_KEY)
    pubKey = privKey.publicKey

    TEST_APP_TOKEN = "X19URVNUSU5HX1RPS0VOX2xramhsZGtqcWUhQCRsa2poYjMyMDk4NDFkdWIkOTE3LWghbGtqa2wsaTk="
    PACKED_CHANGING_ACC_KEY = dec64 '''
        JgAcAQABxAAB6X7cH9NdSxJ1rR/7QeRmDCWM0qNIJkQnI/T8kIAFt2VElm+7
        XeOEpN7tJC85dddWN6hegqW5FrJ8Ug2w8wBuseb/nZpEPeXzKjnAGpd7vrx3
        qfrvQirjCKyVE6OyseLGG1RXvcMTseqdCLAJz/a00SdgqRjK5zH6BhCJiRzV
        8tBsycopGrtPDbHbiSpgmYqvk63nLAxUrD6K/ZdfIN2P7HYekN9Um16L8e9U
        Ro8oqxTAv5kVLr04pA0GajBXl6jUa5Kp/xawSJmOeWY7Hpoi3u2zUa/sMs7O
        RivG9Hbvmj/S89wCjyFd0etLsdT1DH5bnZqWY34pFNuSqOvUKF8AdcQAAfjR
        0ILGcT0oRWN+oa5veOJy0icrk+KpCtDOcDSBLB6glU2HuS75WDJhlWDKcjBC
        m+JdpDRvc+6ISiDs3uUwoMz49mOkGriGJgMwUAnn+o2k+4aL6f2xfOLpGOio
        kKwGXg86zQLFD20qqToxfrZFvzjmVtM9msuNxeJjJtt/2tx6iMogaql8B6Cq
        JLTYuKdb+aJPp8oGNit2ofsp7nbzSKSAXWAX3d25H8HAhJ+xDCJ3r0gmRCcj
        9PydN2XsqHGWb7G9Rs4H0HgXndP9/fHjyiPLa/15BuiluRay4VJnmhFR0Tjr
        EL+nURLBubWit2VY/I0GxfDMdlwz3qi00lLW7ss=
      '''

    api = await CryptoCloud.connect TEST_APP_TOKEN, PACKED_CHANGING_ACC_KEY

    contract = Contract.createToken(pubKey, '100', 0.1, "My test token", "MTK", "", true)
    contract.setContractName("my contract name")
    cloudId = await contract.toCloud(api)
    console.log(cloudId)
    console.log(contract)
    cloudId = await contract.toCloud(api)

    newContract = await Contract.fromCloud(cloudId, api)

    @assertTrue newContract.original.size == contract.original.size
    @assertTrue newContract.temp.size == contract.temp.size
    @assertTrue newContract.pending == contract.pending

    console.log(newContract)

    allContracts = await Contract.allFromCloud(api)

    console.log("all contracts:")
    console.log(allContracts)

    newContract.deleteFromCloud(api)
    @assert allContracts.length == 1 #need to remove old items
